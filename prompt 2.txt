if user has chosen a profile image the picture should be shown in the pages (circle) instead of the profile icon and if there is no profile image, the current icon should be there.
if both senarios the imapge or icon should be the button that goes to the user profile
explain in farsi.
homepage:
<template>
  <q-page class="q-pa-md">
    <!-- Top bar -->
    <div class="row justify-between items-center q-mb-md">
      <div class="text-h6">Date: {{ currentDate }}</div>
      <div class="q-gutter-sm">
        <q-btn
          round
          color="primary"
          icon="account_circle"
          @click="openProfile"
          aria-label="Go to profile"
        />
        <q-btn round flat color="negative" icon="logout" @click="logout" aria-label="Log out" />
      </div>
    </div>
    <q-toggle
      v-model="sortByPriority"
      label="Sort by"
      left-label
      checked-icon="sort"
      unchecked-icon="event"
      color="primary"
    />

    <!-- Error Banner -->
    <q-banner
      v-if="errorMessage"
      dense
      class="bg-negative text-white q-mb-md"
      aria-live="polite"
      role="alert"
    >
      {{ errorMessage }}
    </q-banner>

    <!-- Main layout -->
    <div class="row" style="height: calc(100vh - 120px)">
      <!-- Main content area -->
      <div
        class="col bg-grey-2 rounded-borders q-pa-md overflow-y-auto"
        style="margin-right: 280px; margin-bottom: 10px; width: calc(100% - 280px)"
      >
        <div class="row" style="min-height: 100%; flex-wrap: nowrap">
          <!-- Backlog Column -->
          <div class="col-4" @dragover.prevent @drop="handleDrop('backlog')">
            <div class="text-center text-subtitle2 q-mb-sm">Backlog</div>
            <div
              v-for="item in sortedItems('backlog')"
              :key="item.id"
              class="q-mb-sm bg-white q-pa-sm shadow-1 row justify-between items-center"
              draggable="true"
              @dragstart="startDrag(item)"
              @click="viewItem(item.id)"
            >
              <div>
                <strong>{{ item.type }}</strong
                >: {{ item.title }} (Due: {{ item.deadline || 'N/A' }})
              </div>
              <q-btn
                flat
                round
                icon="delete"
                color="negative"
                size="sm"
                @click.stop="deleteItem(item.id)"
                :disable="!isCreator(item)"
              />
            </div>
          </div>

          <!-- In Progress Column -->
          <div class="col-4 divider-col" @dragover.prevent @drop="handleDrop('in progress')">
            <div class="text-center text-subtitle2 q-mb-sm">In Progress</div>
            <div
              v-for="item in sortedItems('In Progress')"
              :key="item.id"
              class="q-mb-sm bg-white q-pa-sm shadow-1 row justify-between items-center"
              draggable="true"
              @dragstart="startDrag(item)"
              @click="viewItem(item.id)"
            >
              <div>
                <strong>{{ item.type }}</strong
                >: {{ item.title }} (Due: {{ item.deadline || 'N/A' }})
              </div>
              <q-btn
                flat
                round
                icon="delete"
                color="negative"
                size="sm"
                @click.stop="deleteItem(item.id)"
                :disable="!isCreator(item)"
              />
            </div>
          </div>

          <!-- Done Column -->
          <div class="col-4 divider-col" @dragover.prevent @drop="handleDrop('done')">
            <div class="text-center text-subtitle2 q-mb-sm">Done</div>
            <div
              v-for="item in sortedItems('done')"
              :key="item.id"
              class="q-mb-sm bg-white q-pa-sm shadow-1 row justify-between items-center"
              draggable="true"
              @dragstart="startDrag(item)"
              @click="viewItem(item.id)"
            >
              <div>
                <strong>{{ item.type }}</strong
                >: {{ item.title }} (Due: {{ item.deadline || 'N/A' }})
              </div>
              <q-btn
                flat
                round
                icon="delete"
                color="negative"
                size="sm"
                @click.stop="deleteItem(item.id)"
                :disable="!isCreator(item)"
              />
            </div>
          </div>
        </div>
      </div>

      <!-- Right-side Form Panel -->
      <div
        class="fixed-top-right"
        style="
          width: 260px;
          top: 60px;
          right: 10px;
          bottom: 10px;
          overflow-y: auto;
          padding: 10px 0px;
        "
      >
        <q-btn
          label="Add Item"
          icon="add"
          color="secondary"
          class="full-width q-mb-md"
          @click="toggleForm = !toggleForm"
        />

        <!-- Invitations Banner -->
        <q-banner
          dense
          class="bg-yellow-9 text-white q-mb-md"
          aria-live="polite"
          role="alert"
        >
          <template v-if="pendingInvitations.length">
            Invitations ({{ pendingInvitations.length }})
            <q-btn
              flat
              label="View"
              color="white"
              @click="showInvitationsDialog = true"
              aria-label="View pending invitations"
            />
          </template>
          <template v-else>
            Invitations
          </template>
        </q-banner>

        <!-- Progress Chart -->
        <div class="q-my-md flex flex-center">
          <q-circular-progress
            show-value
            :value="completionPercent"
            size="80px"
            color="green"
            track-color="grey-3"
          >
            {{ completionPercent }}%
          </q-circular-progress>
        </div>

        <!-- Item Form -->
        <div v-if="toggleForm" class="bg-white">
          <q-form @submit.prevent="addItem" style="padding: 5px 15px">
            <q-select
              v-model="itemForm.type"
              :options="['Task', 'Project', 'Portfolio', 'Other']"
              label="Item Type (select or type)"
              dense
              use-input
              input-debounce="0"
              :error="!itemForm.type && formSubmitted"
              error-message="Item Type is required"
            />
            <q-input
              v-model="itemForm.title"
              label="Item Title"
              dense
              :error="!itemForm.title && formSubmitted"
              error-message="Title is required"
            />
            <q-input
              v-model="itemForm.deadline"
              label="Deadline"
              dense
              type="datetime-local"
              :error="!itemForm.deadline && formSubmitted"
              error-message="Deadline is required"
            />
            <q-select
              v-model="itemForm.status"
              :options="statusOptions"
              label="Status"
              dense
              :error="!itemForm.status && formSubmitted"
              error-message="Status is required"
            />
            <q-select
              v-model="itemForm.priority"
              :options="['Low', 'Medium', 'High']"
              label="Priority"
              dense
              :error="!itemForm.priority && formSubmitted"
              error-message="Priority is required"
            />
            <q-select
              v-model="itemForm.category"
              :options="categoryOptions"
              use-input
              use-chips
              label="Category"
              multiple
              dense
            />
            <div class="q-mt-sm">
              <div class="text-subtitle2">Subitems</div>
              <div
                v-for="(subitem, index) in itemForm.subitems"
                :key="index"
                class="row items-center q-mb-xs"
              >
                <q-select
                  v-model="itemForm.subitems[index].type"
                  :options="['Task', 'Project', 'Portfolio', 'Other']"
                  label="Subitem Type"
                  dense
                  use-input
                  input-debounce="0"
                  :error="!itemForm.subitems[index].type && formSubmitted"
                  error-message="Subitem Type is required"
                />
                <q-input
                  v-model="itemForm.subitems[index].title"
                  label="Subitem Title"
                  dense
                  class="q-ml-sm"
                  :error="!itemForm.subitems[index].title && formSubmitted"
                  error-message="Subitem Title is required"
                />
                <q-input
                  v-model="itemForm.subitems[index].deadline"
                  label="Deadline"
                  dense
                  type="datetime-local"
                  :max="itemForm.deadline || undefined"
                  :error="!itemForm.subitems[index].deadline && formSubmitted"
                  error-message="Deadline is required"
                  class="q-ml-sm"
                />
                <q-select
                  v-model="itemForm.subitems[index].status"
                  :options="statusOptions"
                  label="Status"
                  dense
                  class="q-ml-sm"
                  :error="!itemForm.subitems[index].status && formSubmitted"
                  error-message="Status is required"
                />
                <q-select
                  v-model="itemForm.subitems[index].priority"
                  :options="['Low', 'Medium', 'High']"
                  label="Priority"
                  dense
                  class="q-ml-sm"
                  :error="!itemForm.subitems[index].priority && formSubmitted"
                  error-message="Priority is required"
                />
                <q-btn
                  flat
                  round
                  icon="remove"
                  color="negative"
                  size="sm"
                  @click="itemForm.subitems.splice(index, 1)"
                />
              </div>
              <q-btn
                flat
                icon="add"
                size="sm"
                color="secondary"
                @click="
                  itemForm.subitems.push({
                    type: '',
                    title: '',
                    deadline: '',
                    status: 'backlog',
                    priority: 'Low',
                  })
                "
              />
            </div>
            <div class="q-mt-sm">
              <div class="text-subtitle2">Share With</div>
              <div
                v-for="(share, index) in itemForm.shareWith"
                :key="index"
                class="row items-center q-mb-xs"
              >
                <q-input v-model="share.username" label="Username" dense class="col q-mr-sm" />
                <q-select
                  v-model="share.role"
                  :options="['admin', 'observer']"
                  label="Role"
                  dense
                  class="col"
                />
                <q-btn
                  flat
                  round
                  icon="remove"
                  color="negative"
                  size="sm"
                  @click="itemForm.shareWith.splice(index, 1)"
                />
              </div>
              <q-btn
                flat
                icon="add"
                size="sm"
                color="secondary"
                @click="itemForm.shareWith.push({ username: '', role: 'observer' })"
              />
            </div>
            <div class="q-mt-sm">
              <div class="text-subtitle2">Backlog</div>
              <div
                v-for="(b, index) in itemForm.backlog"
                :key="index"
                class="row items-center q-mb-xs"
              >
                <q-input v-model="itemForm.backlog[index]" dense class="col" />
                <q-btn
                  flat
                  round
                  icon="remove"
                  color="negative"
                  size="sm"
                  @click="itemForm.backlog.splice(index, 1)"
                />
              </div>
              <q-btn
                flat
                icon="add"
                size="sm"
                color="secondary"
                @click="itemForm.backlog.push('')"
              />
            </div>
            <q-btn type="submit" label="Save Item" color="secondary" class="q-mt-sm full-width" />
          </q-form>
        </div>
      </div>
    </div>

    <!-- Invitations Dialog -->
    <q-dialog v-model="showInvitationsDialog" persistent>
      <q-card style="width: 600px; max-width: 90vw;">
        <q-card-section>
          <div class="text-h6">Pending Invitations</div>
        </q-card-section>
        <q-card-section>
          <q-list v-if="pendingInvitations.length" bordered>
            <q-item
              v-for="invitation in pendingInvitations"
              :key="invitation.itemId + '-' + invitation.username"
            >
              <q-item-section>
                <q-item-label>
                  Invited to: {{ getItemTitle(invitation.itemId) }} (Role: {{ invitation.role }})
                </q-item-label>
                <q-item-label caption>
                  Invited at: {{ new Date(invitation.invitedAt).toLocaleString('en-US', { timeZone: 'Asia/Dubai' }) }}
                </q-item-label>
              </q-item-section>
              <q-item-section side>
                <q-btn
                  flat
                  color="positive"
                  label="Accept"
                  @click="acceptInvitation(invitation)"
                />
                <q-btn
                  flat
                  color="negative"
                  label="Reject"
                  @click="rejectInvitation(invitation)"
                />
              </q-item-section>
            </q-item>
          </q-list>
          <div v-else class="text-negative">No pending invitations</div>
        </q-card-section>
        <q-card-actions align="right">
          <q-btn flat label="Close" color="primary" v-close-popup />
        </q-card-actions>
      </q-card>
    </q-dialog>
  </q-page>
</template>

<script setup>
import { ref, computed, onMounted, watch, nextTick } from 'vue'
import { useRouter } from 'vue-router'

const router = useRouter()
const currentDate = new Date().toLocaleDateString('en-US', { timeZone: 'Asia/Dubai' })
const items = ref([])
const sortByPriority = ref(false)
const toggleForm = ref(false)
const formSubmitted = ref(false)
const errorMessage = ref('')
const pendingInvitations = ref([])
const showInvitationsDialog = ref(false)

const categoryOptions = ref(['Development', 'Design', 'Marketing', 'Research', 'Others'])
const statusOptions = ref(['Backlog', 'In Progress', 'Done'])

const itemForm = ref({
  type: '',
  title: '',
  deadline: '',
  category: [],
  subitems: [],
  shareWith: [],
  backlog: [],
  priority: '',
  status: '',
})

const currentUser = ref(JSON.parse(localStorage.getItem('userProfile') || '{}')?.username || '')

onMounted(() => {
  const token = localStorage.getItem('authToken')
  if (!token) {
    console.log('User not authenticated, redirecting to login')
    router.push('/login')
  }
  const savedItems = localStorage.getItem(`kanbanItems_${currentUser.value}`)
  if (savedItems) {
    items.value = JSON.parse(savedItems)
  }
  loadInvitations()
})

const loadInvitations = () => {
  const invitations = JSON.parse(localStorage.getItem(`kanbanInvitations_${currentUser.value}`) || '[]')
  pendingInvitations.value = invitations.filter(
    inv => inv.username === currentUser.value && inv.status === 'pending'
  )
}

const saveItems = () => {
  localStorage.setItem(`kanbanItems_${currentUser.value}`, JSON.stringify(items.value))
}

const saveInvitations = (invitations, username) => {
  localStorage.setItem(`kanbanInvitations_${username}`, JSON.stringify(invitations))
}

const isCreator = (item) => {
  return item.creator === currentUser.value
}

const acceptInvitation = (invitation) => {
  const invitations = JSON.parse(localStorage.getItem(`kanbanInvitations_${currentUser.value}`) || '[]')
  const index = invitations.findIndex(
    inv => inv.itemId === invitation.itemId && inv.username === invitation.username
  )
  if (index !== -1) {
    invitations[index].status = 'accepted'
    saveInvitations(invitations, currentUser.value)

    const creatorItems = JSON.parse(localStorage.getItem(`kanbanItems_${invitation.invitedBy}`) || '[]')
    const sharedItem = findItemById(creatorItems, invitation.itemId)
    if (sharedItem) {
      const userItems = JSON.parse(localStorage.getItem(`kanbanItems_${currentUser.value}`) || '[]')
      const itemCopy = JSON.parse(JSON.stringify(sharedItem))
      itemCopy.shareWith = itemCopy.shareWith || []
      if (!itemCopy.shareWith.some(u => u.username === currentUser.value)) {
        itemCopy.shareWith.push({ username: currentUser.value, role: invitation.role })
      }
      // Copy shareWith to subitems
      if (itemCopy.subitems) {
        itemCopy.subitems.forEach(subitem => {
          subitem.shareWith = [...itemCopy.shareWith]
        })
      }
      userItems.push(itemCopy)
      localStorage.setItem(`kanbanItems_${currentUser.value}`, JSON.stringify(userItems))
      items.value = userItems
    }
    loadInvitations()
  }
}

const rejectInvitation = (invitation) => {
  const invitations = JSON.parse(localStorage.getItem(`kanbanInvitations_${currentUser.value}`) || '[]')
  const index = invitations.findIndex(
    inv => inv.itemId === invitation.itemId && inv.username === invitation.username
  )
  if (index !== -1) {
    invitations[index].status = 'rejected'
    saveInvitations(invitations, currentUser.value)
    loadInvitations()
  }
}

const findItemById = (items, id) => {
  for (let item of items) {
    if (item.id === id) return item
    if (item.subitems) {
      const found = findItemById(item.subitems, id)
      if (found) return found
    }
  }
  return null
}

const getItemTitle = (itemId) => {
  const item = findItemById(items.value, itemId)
  return item ? `${item.type}: ${item.title}` : 'Unknown Item'
}

const logout = () => {
  localStorage.removeItem('authToken')
  localStorage.removeItem('userProfile')
  router.push('/login')
  console.log('User logged out')
}

const addItem = () => {
  formSubmitted.value = true
  if (
    !itemForm.value.type ||
    !itemForm.value.title ||
    !itemForm.value.deadline ||
    !itemForm.value.status ||
    !itemForm.value.priority
  ) {
    errorMessage.value = 'Please fill all required fields'
    return
  }

  const hasInvalidSubitemDeadline = itemForm.value.subitems.some(subitem => {
    if (subitem.deadline && itemForm.value.deadline) {
      return new Date(subitem.deadline) > new Date(itemForm.value.deadline)
    }
    return false
  })
  if (hasInvalidSubitemDeadline) {
    errorMessage.value = 'Subitem deadline cannot be after the parent item deadline.'
    return
  }

  const statusMap = {
    Backlog: 'backlog',
    'In Progress': 'in progress',
    Done: 'done',
  }
  const parentId = Date.now()
  const newItem = {
    id: parentId,
    type: itemForm.value.type,
    title: itemForm.value.title,
    deadline: itemForm.value.deadline,
    status: statusMap[itemForm.value.status] || 'in progress',
    priority: itemForm.value.priority,
    category: itemForm.value.category,
    subitems: itemForm.value.subitems.map((subitem, index) => ({
      id: parentId + index + 1,
      type: subitem.type,
      title: subitem.title,
      deadline: subitem.deadline,
      status: subitem.status || 'backlog',
      priority: subitem.priority || 'Low',
      parentId: parentId,
      category: [],
      shareWith: [...itemForm.value.shareWith],
      backlog: [],
      movedToDoneAt: null,
      creator: currentUser.value,
      assignedTo: null,
    })),
    shareWith: [{ username: currentUser.value, role: 'owner' }, ...itemForm.value.shareWith],
    backlog: itemForm.value.backlog,
    movedToDoneAt: itemForm.value.status === 'Done' ? Date.now() : null,
    creator: currentUser.value,
    assignedTo: null,
  }
  items.value.push(newItem)

  const shareUsernames = itemForm.value.shareWith
    .filter(share => share.username && share.username !== currentUser.value)
    .map(share => share.username)
  shareUsernames.forEach(username => {
    const invitations = JSON.parse(localStorage.getItem(`kanbanInvitations_${username}`) || '[]')
    const share = itemForm.value.shareWith.find(s => s.username === username)
    if (share) {
      invitations.push({
        itemId: parentId,
        username: username,
        role: share.role,
        status: 'pending',
        invitedAt: Date.now(),
        invitedBy: currentUser.value,
      })
      saveInvitations(invitations, username)
    }
  })

  resetForm(itemForm)
  toggleForm.value = false
  formSubmitted.value = false
  saveItems()
  errorMessage.value = ''
}

const viewItem = (id) => {
  router.push(`/itemDetail/${id}`)
}

function resetForm(form) {
  Object.keys(form.value).forEach(
    (key) => (form.value[key] = Array.isArray(form.value[key]) ? [] : ''),
  )
  form.value.shareWith = []
}

const deleteItem = (id) => {
  const item = findItemById(items.value, id)
  if (!isCreator(item)) {
    errorMessage.value = 'Only the owner can delete this item.'
    return
  }
  items.value = items.value.filter(
    (item) => item.id !== id && (!item.subitems || item.subitems.every((s) => s.id !== id)),
  )
  saveItems()
}

function openProfile() {
  router.push('/profile')
  console.log('Navigating to profile')
}

const draggedItem = ref(null)
const startDrag = (item) => {
  if (isCreator(item)) {
    draggedItem.value = item
  }
}

const handleDrop = (newStatus) => {
  if (!draggedItem.value || !isCreator(draggedItem.value)) return
  if (newStatus === 'done') {
    const allSubitemsDone =
      !draggedItem.value.subitems ||
      draggedItem.value.subitems.every((sub) => sub.status === 'done')
    if (!allSubitemsDone) {
      errorMessage.value = 'Cannot move to Done: All subitems must be in Done status.'
      return
    }
    draggedItem.value.movedToDoneAt = Date.now()
  }
  draggedItem.value.status = newStatus
  items.value = [...items.value]
  saveItems()
  errorMessage.value = ''
  draggedItem.value = null
}

const completionPercent = computed(() => {
  const rootItems = items.value.filter((item) => !item.parentId)
  if (rootItems.length === 0) return 0
  const doneItems = rootItems.filter((item) => item.status?.toLowerCase() === 'done').length
  return Math.round((doneItems / rootItems.length) * 100)
})

const priorityMap = {
  High: 3,
  Medium: 2,
  Low: 1,
  '': 0,
}

const sortedItems = (status) => {
  const statusMap = {
    Backlog: 'backlog',
    'In Progress': 'in progress',
    Done: 'done',
  }
  const normalizedStatus = statusMap[status] || status.toLowerCase()
  const filtered = items.value.filter((item) => {
    const itemStatus = item.status?.toLowerCase() || ''
    return !item.parentId && itemStatus === normalizedStatus
  })
  if (status === 'done') {
    return filtered.sort((a, b) => (a.movedToDoneAt || 0) - (b.movedToDoneAt || 0))
  }
  if (sortByPriority.value) {
    return filtered.sort((a, b) => {
      const priorityA = priorityMap[a.priority] || 0
      const priorityB = priorityMap[b.priority] || 0
      return priorityB - priorityA
    })
  }
  return filtered.sort((a, b) => new Date(a.deadline) - new Date(b.deadline))
}

watch(
  () => localStorage.getItem(`kanbanItems_${currentUser.value}`),
  async (newValue) => {
    if (newValue) {
      items.value = JSON.parse(newValue)
      await nextTick()
    }
  },
)

watch(
  () => localStorage.getItem(`kanbanInvitations_${currentUser.value}`),
  () => {
    loadInvitations()
  },
)
</script>

<style scoped>
.divider-col {
  border-left: 1px solid #ccc;
  padding-left: 8px;
}
</style>


profile:
<template>
  <q-page class="q-pa-md flex flex-center">
    <q-card class="q-pa-lg shadow-2 constrained-card">
      <!-- Fixed Profile Section -->
      <q-card-section class="fixed-section">
        <!-- API error banner -->
        <q-banner
          v-if="apiError"
          dense
          class="bg-negative text-white q-mb-md"
          aria-live="polite"
          role="alert"
        >
          {{ apiError }}
        </q-banner>

        <!-- Success banner -->
        <q-banner
          v-if="successMessage"
          dense
          class="bg-positive text-white q-mb-md"
          aria-live="polite"
          role="alert"
        >
          {{ successMessage }}
        </q-banner>

        <!-- Profile Picture -->
        <div class="flex flex-center q-mb-md">
          <q-avatar size="80px" aria-label="Profile picture">
            <template v-if="profile.picture">
              <img :src="profile.picture" alt="User profile picture" />
            </template>
            <template v-else>
              <q-icon name="account_box" size="80px" color="primary" />
            </template>
          </q-avatar>
        </div>

        <!-- Picture Buttons (edit mode) -->
        <div v-if="editMode" class="flex flex-center q-mb-md q-gutter-sm">
          <q-btn
            dense
            flat
            icon="photo_camera"
            label="Change Picture"
            @click="triggerFileInput"
            aria-label="Change profile picture"
          />
          <q-btn
            dense
            flat
            icon="delete"
            label="Remove Picture"
            @click="removePicture"
            color="negative"
            aria-label="Remove profile picture"
          />
          <input
            ref="fileInput"
            type="file"
            accept="image/*"
            class="hidden"
            @change="onFileChange"
            aria-label="Upload profile picture"
          />
        </div>
      </q-card-section>

      <!-- Scrollable Input Section -->
      <q-card-section class="scrollable-section">
        <q-form @submit.prevent="saveProfile">
          <!-- Username input -->
          <q-input
            filled
            v-model="profile.username"
            label="Username"
            dense
            class="uniform-input"
            :readonly="!editMode"
            :error="usernameError"
            error-message="Username is required or already taken"
            @input="clearUsernameError"
            autofocus
            aria-label="Enter your username"
            no-error-icon
          />

          <!-- First Name input -->
          <q-input
            filled
            v-model="profile.firstName"
            label="First Name"
            dense
            class="uniform-input"
            :readonly="!editMode"
            :error="false"
            aria-label="Enter your first name"
            no-error-icon
          />

          <!-- Last Name input -->
          <q-input
            filled
            v-model="profile.lastName"
            label="Last Name"
            dense
            class="uniform-input"
            :readonly="!editMode"
            :error="false"
            aria-label="Enter your last name"
            no-error-icon
          />

          <!-- Date of Birth input -->
          <q-input
            filled
            v-model="profile.dob"
            label="Date of Birth"
            dense
            class="uniform-input"
            mask="####-##-##"
            :readonly="!editMode"
            :error="!!dobError"
            :error-message="dobError"
            @input="validateDob"
            aria-label="Enter your date of birth"
            no-error-icon
          >
            <template v-slot:append>
              <q-icon
                name="event"
                class="cursor-pointer"
                v-if="editMode"
                @click="showDatePicker = true"
                aria-label="Open date picker"
              />
            </template>
            <template v-slot:bottom v-if="editMode">
              <div class="text-caption">Format: YYYY-MM-DD</div>
            </template>
            <q-popup-proxy
              v-if="editMode"
              v-model="showDatePicker"
              transition-show="scale"
              transition-hide="scale"
              anchor="bottom middle"
              self="top middle"
            >
              <q-date
                v-model="profile.dob"
                mask="YYYY-MM-DD"
                @update:model-value="validateDob"
              />
            </q-popup-proxy>
          </q-input>

          <!-- Email input -->
          <q-input
            filled
            v-model="profile.email"
            label="Email"
            type="email"
            dense
            class="uniform-input"
            :readonly="!editMode"
            :error="emailError"
            :error-message="emailErrorMessage"
            @input="clearEmailError"
            aria-label="Enter your email"
            no-error-icon
          />

          <!-- Job input -->
          <q-input
            filled
            v-model="profile.job"
            label="Job"
            dense
            class="uniform-input"
            :readonly="!editMode"
            :error="false"
            aria-label="Enter your job title"
            no-error-icon
          />

          <!-- Bio input -->
          <q-input
            filled
            v-model="profile.bio"
            label="Bio"
            type="textarea"
            dense
            class="uniform-input"
            autogrow
            :readonly="!editMode"
            :error="false"
            aria-label="Enter your bio"
            no-error-icon
          />

          <!-- Change Password Section (visible in edit mode) -->
          <q-expansion-item
            v-if="editMode"
            label="Change Password"
            icon="lock"
            dense
            class="q-mt-md"
            expand-icon="chevron_right"
            expanded-icon="chevron_down"
          >
            <q-card>
              <q-card-section>
                <q-input
                  filled
                  v-model="password.new"
                  :type="showPassword ? 'text' : 'password'"
                  label="New Password"
                  dense
                  class="uniform-input"
                  :error="passwordError"
                  :error-message="passwordErrorMessage"
                  @input="clearPasswordError"
                  aria-label="Enter new password"
                  no-error-icon
                >
                  <template v-slot:append>
                    <q-icon
                      :name="showPassword ? 'visibility_off' : 'visibility'"
                      class="cursor-pointer"
                      @click="showPassword = !showPassword"
                      aria-label="Toggle password visibility"
                    />
                  </template>
                </q-input>
                <q-input
                  filled
                  v-model="password.confirm"
                  :type="showPassword ? 'text' : 'password'"
                  label="Confirm New Password"
                  dense
                  class="uniform-input"
                  :error="confirmPasswordError"
                  error-message="Passwords do not match"
                  @input="clearConfirmPasswordError"
                  aria-label="Confirm new password"
                  no-error-icon
                >
                  <template v-slot:append>
                    <q-icon
                      :name="showPassword ? 'visibility_off' : 'visibility'"
                      class="cursor-pointer"
                      @click="showPassword = !showPassword"
                      aria-label="Toggle password visibility"
                    />
                  </template>
                </q-input>
              </q-card-section>
            </q-card>
          </q-expansion-item>

          <!-- Buttons -->
          <q-btn
            v-if="!editMode"
            label="Edit Profile"
            color="primary"
            class="full-width q-mt-md"
            @click="editMode = true"
            aria-label="Edit profile"
          />
          <div v-else class="row q-col-gutter-sm q-mt-md">
            <q-btn
              label="Save"
              color="primary"
              class="col"
              :loading="isLoading"
              type="submit"
              aria-label="Save profile changes"
            />
            <q-btn
              label="Cancel"
              flat
              color="primary"
              class="col"
              @click="cancelEdit"
              aria-label="Cancel profile changes"
            />
            <q-btn
              label="Delete Account"
              flat
              color="negative"
              class="col"
              @click="showDeleteDialog = true"
              aria-label="Delete your account"
            />
          </div>
        </q-form>

        <q-separator class="q-my-md" />

        <router-link
          to="/home"
          class="text-primary text-caption full-width text-center"
          style="text-decoration: none; display: block;"
          tabindex="0"
          @click="goToHome"
          aria-label="Navigate back to home page"
        >
          Back to Home
        </router-link>
      </q-card-section>
    </q-card>

    <!-- Delete Confirmation Dialog -->
    <q-dialog v-model="showDeleteDialog" persistent>
      <q-card>
        <q-card-section class="row items-center">
          <q-icon name="warning" color="negative" size="lg" class="q-mr-sm" />
          <span class="text-h6">Confirm Account Deletion</span>
        </q-card-section>
        <q-card-section>
          Are you sure you want to delete your account? This action will permanently remove all your data, including your profile and kanban items, and cannot be undone.
        </q-card-section>
        <q-card-actions align="right">
          <q-btn flat label="Cancel" color="primary" v-close-popup aria-label="Cancel deletion" />
          <q-btn
            flat
            label="Confirm"
            color="negative"
            @click="deleteAccount"
            aria-label="Confirm account deletion"
          />
        </q-card-actions>
      </q-card>
    </q-dialog>
  </q-page>
</template>

<script setup>
import { ref, computed, watch, onMounted } from 'vue'
import { useRouter } from 'vue-router'

// Profile data
const profile = ref({
  username: '',
  firstName: '',
  lastName: '',
  dob: '',
  email: '',
  job: '',
  bio: '',
  picture: ''
})

// Password change data
const password = ref({
  new: '',
  confirm: ''
})

const router = useRouter()
const editMode = ref(false)
const isLoading = ref(false)
const showPassword = ref(false)
const backupProfile = ref(null)
const showDatePicker = ref(false)
const showDeleteDialog = ref(false)
const usernameTouched = ref(false)
const emailTouched = ref(false)
const passwordTouched = ref(false)
const confirmTouched = ref(false)
const dobError = ref('')
const usernameError = ref(false)
const emailError = ref(false)
const passwordError = ref(false)
const confirmPasswordError = ref(false)
const apiError = ref('')
const successMessage = ref('')

// Original username and email for comparison
const originalUsername = ref('')
const originalEmail = ref('')

// Email format validator
const isEmailValid = computed(() => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  return emailRegex.test(profile.value.email)
})

const emailErrorMessage = computed(() => {
  if (emailTouched.value && profile.value.email === '') return 'Email is required'
  if (emailTouched.value && !isEmailValid.value) return 'Invalid email format'
  return ''
})

// Password validator
const isPasswordValid = computed(() => {
  return password.value.new.length >= 8
})

const passwordErrorMessage = computed(() => {
  if (passwordTouched.value && password.value.new === '') return 'Password is required'
  if (passwordTouched.value && !isPasswordValid.value) return 'Password must be at least 8 characters'
  return ''
})

// Validate DOB
const validateDob = () => {
  const regex = /^\d{4}-\d{2}-\d{2}$/
  if (!profile.value.dob) {
    dobError.value = ''
    return
  }
  if (!regex.test(profile.value.dob)) {
    dobError.value = 'Please enter the date in format YYYY-MM-DD'
    return
  }
  const date = new Date(profile.value.dob)
  const today = new Date()
  const minDate = new Date(today.getFullYear() - 13, today.getMonth(), today.getDate())
  const maxDate = new Date(today.getFullYear() - 100, today.getMonth(), today.getDate())
  if (isNaN(date.getTime())) {
    dobError.value = 'Invalid date'
  } else if (date > today) {
    dobError.value = 'Date of birth cannot be in the future'
  } else if (date > minDate) {
    dobError.value = 'You must be at least 13 years old'
  } else if (date < maxDate) {
    dobError.value = 'Date of birth is too far in the past'
  } else {
    dobError.value = ''
  }
}

// Save profile
const saveProfile = () => {
  console.log('saveProfile called')
  usernameTouched.value = true
  emailTouched.value = true
  passwordTouched.value = !!password.value.new
  confirmTouched.value = !!password.value.confirm
  apiError.value = ''
  successMessage.value = ''
  isLoading.value = true

  // Validate fields
  validateDob()
  usernameError.value = !profile.value.username
  emailError.value = !profile.value.email || !isEmailValid.value
  passwordError.value = passwordTouched.value && (!password.value.new || !isPasswordValid.value)
  confirmPasswordError.value = confirmTouched.value && password.value.new !== password.value.confirm

  console.log('Validation errors:', {
    usernameError: usernameError.value,
    emailError: emailError.value,
    dobError: dobError.value,
    passwordError: passwordError.value,
    confirmPasswordError: confirmPasswordError.value
  })

  if (usernameError.value || emailError.value || dobError.value || passwordError.value || confirmPasswordError.value) {
    isLoading.value = false
    console.log('Validation failed, stopping save')
    return
  }

  // Check uniqueness of username and email
  const kanbanUsers = JSON.parse(localStorage.getItem('kanbanUsers') || '[]')
  if (profile.value.username !== originalUsername.value && kanbanUsers.some(user => user.username === profile.value.username)) {
    apiError.value = 'Username already taken'
    usernameError.value = true
    isLoading.value = false
    return
  }
  if (profile.value.email !== originalEmail.value && kanbanUsers.some(user => user.email === profile.value.email)) {
    apiError.value = 'Email already taken'
    isLoading.value = false
    return
  }

  // Simulate backend API call
  setTimeout(() => {
    console.log('Simulating API call')
    try {
      // Preserve existing password if not changed
      const existingUser = kanbanUsers.find(user => user.username === originalUsername.value)
      const existingPassword = existingUser?.password

      // Update kanbanUsers: Remove old user and add new one with all profile data
      const updatedUsers = kanbanUsers.filter(user =>
        user.username !== originalUsername.value || user.email !== originalEmail.value
      )
      updatedUsers.push({
        username: profile.value.username,
        email: profile.value.email,
        firstName: profile.value.firstName,
        lastName: profile.value.lastName,
        dob: profile.value.dob,
        job: profile.value.job,
        bio: profile.value.bio,
        picture: profile.value.picture,
        password: password.value.new || existingPassword || ''
      })
      localStorage.setItem('kanbanUsers', JSON.stringify(updatedUsers))

      // If username changed, transfer kanbanItems and kanbanInvitations to new username
      if (profile.value.username !== originalUsername.value) {
        const oldItems = JSON.parse(localStorage.getItem(`kanbanItems_${originalUsername.value}`) || '[]')
        const oldInvitations = JSON.parse(localStorage.getItem(`kanbanInvitations_${originalUsername.value}`) || '[]')

        // Transfer items
        if (oldItems.length > 0) {
          localStorage.setItem(`kanbanItems_${profile.value.username}`, JSON.stringify(oldItems))
          localStorage.removeItem(`kanbanItems_${originalUsername.value}`)
        }

        // Transfer invitations
        if (oldInvitations.length > 0) {
          localStorage.setItem(`kanbanInvitations_${profile.value.username}`, JSON.stringify(oldInvitations))
          localStorage.removeItem(`kanbanInvitations_${originalUsername.value}`)
        }

        // Update creator and shareWith fields in items
        const items = JSON.parse(localStorage.getItem(`kanbanItems_${profile.value.username}`) || '[]')
        items.forEach(item => {
          if (item.creator === originalUsername.value) {
            item.creator = profile.value.username
          }
          if (item.shareWith) {
            item.shareWith = item.shareWith.map(share => {
              if (share.username === originalUsername.value) {
                return { ...share, username: profile.value.username }
              }
              return share
            })
          }
          if (item.subitems) {
            item.subitems.forEach(subitem => {
              if (subitem.creator === originalUsername.value) {
                subitem.creator = profile.value.username
              }
              if (subitem.shareWith) {
                subitem.shareWith = subitem.shareWith.map(share => {
                  if (share.username === originalUsername.value) {
                    return { ...share, username: profile.value.username }
                  }
                  return share
                })
              }
            })
          }
        })
        localStorage.setItem(`kanbanItems_${profile.value.username}`, JSON.stringify(items))
      }

      // Save updated profile
      localStorage.setItem('userProfile', JSON.stringify(profile.value))
      console.log('Profile saved to localStorage:', profile.value)
      backupProfile.value = null
      editMode.value = false
      if (password.value.new) {
        console.log('Password changed to:', password.value.new)
        password.value.new = ''
        password.value.confirm = ''
        passwordTouched.value = false
        confirmTouched.value = false
      }
      successMessage.value = 'Profile saved successfully'
      console.log('Profile save successful')
      // Update original values
      originalUsername.value = profile.value.username
      originalEmail.value = profile.value.email
      setTimeout(() => {
        successMessage.value = ''
      }, 3000) // Clear success message after 3 seconds
    } catch (e) {
      apiError.value = 'Failed to save profile due to storage error'
      console.error('Error saving to localStorage:', e)
    }
    isLoading.value = false
    console.log('API simulation complete, isLoading set to false')
  }, 1000)
}

// Cancel edit
const cancelEdit = () => {
  if (backupProfile.value) {
    profile.value = { ...backupProfile.value }
  }
  password.value.new = ''
  password.value.confirm = ''
  usernameError.value = false
  emailError.value = false
  dobError.value = ''
  passwordError.value = false
  confirmPasswordError.value = false
  usernameTouched.value = false
  emailTouched.value = false
  passwordTouched.value = false
  confirmTouched.value = false
  editMode.value = false
  apiError.value = ''
  successMessage.value = ''
  console.log('Edit cancelled, state reset')
}

// Backup profile when entering edit mode
watch(editMode, (newVal) => {
  if (newVal) {
    backupProfile.value = { ...profile.value }
    console.log('Edit mode enabled, profile backed up')
  }
})

// Picture upload logic
const fileInput = ref(null)

const triggerFileInput = () => {
  if (editMode.value) {
    fileInput.value.click()
    console.log('File input triggered')
  }
}

const onFileChange = (event) => {
  const file = event.target.files[0]
  if (file) {
    if (!file.type.startsWith('image/')) {
      apiError.value = 'Please upload an image file'
      console.log('Invalid file type, cleared input')
      fileInput.value.value = ''
      return
    }
    if (file.size > 5 * 1024 * 1024) {
      apiError.value = 'Image size must be less than 5MB'
      console.log('File too large, cleared input')
      fileInput.value.value = ''
      return
    }
    const reader = new FileReader()
    reader.onload = (e) => {
      profile.value.picture = e.target.result
      console.log('Image loaded successfully')
    }
    reader.readAsDataURL(file)
  }
}

const removePicture = () => {
  if (editMode.value) {
    profile.value.picture = ''
    console.log('Profile picture removed')
  }
}

// Clear error states
const clearUsernameError = () => {
  if (profile.value.username) usernameError.value = false
}

const clearEmailError = () => {
  if (profile.value.email && isEmailValid.value) emailError.value = false
}

const clearPasswordError = () => {
  if (password.value.new && isPasswordValid.value) passwordError.value = false
}

const clearConfirmPasswordError = () => {
  if (password.value.new === password.value.confirm) confirmPasswordError.value = false
}

// Check authentication and load profile
onMounted(() => {
  const token = localStorage.getItem('authToken')
  if (!token) {
    apiError.value = 'User not authenticated, redirecting to login'
    console.log('No auth token, redirecting to login')
    setTimeout(() => {
      router.push('/login')
    }, 3000)
  }
  const savedProfile = localStorage.getItem('userProfile')
  if (savedProfile) {
    try {
      profile.value = JSON.parse(savedProfile)
      originalUsername.value = profile.value.username
      originalEmail.value = profile.value.email
      console.log('Profile loaded from localStorage:', profile.value)
    } catch (e) {
      apiError.value = 'Failed to load profile data'
      console.error('Error loading profile from localStorage:', e)
    }
  }
})

// Delete account
const deleteAccount = () => {
  showDeleteDialog.value = false
  try {
    // Remove user from kanbanUsers
    const kanbanUsers = JSON.parse(localStorage.getItem('kanbanUsers') || '[]')
    const updatedUsers = kanbanUsers.filter(user =>
      user.username !== profile.value.username || user.email !== profile.value.email
    )
    localStorage.setItem('kanbanUsers', JSON.stringify(updatedUsers))

    // Remove user-specific data
    localStorage.removeItem(`kanbanItems_${profile.value.username}`)
    localStorage.removeItem(`kanbanInvitations_${profile.value.username}`)
    localStorage.removeItem('authToken')
    localStorage.removeItem('userProfile')
    successMessage.value = 'Account deleted successfully'
    console.log('Account deleted successfully')
    setTimeout(() => {
      router.push('/login')
    }, 3000)
  } catch (e) {
    apiError.value = 'Failed to delete account'
    console.error('Error deleting account:', e)
  }
}

// Navigate to home
const goToHome = () => {
  router.push('/home')
  console.log('Navigating to home')
}
</script>

<style scoped>
.hidden {
  display: none;
}
.constrained-card {
  width: 400px;
  max-width: 90vw;
  max-height: calc(100vh - 32px);
  display: flex;
  flex-direction: column;
}
.fixed-section {
  position: sticky;
  top: 0;
  z-index: 1;
  background: white;
  padding-bottom: 0;
}
.scrollable-section {
  overflow-y: auto;
  max-height: calc(100vh - 180px);
  padding-right: 8px;
}
.uniform-input {
  margin-bottom: 0px !important;
}
.uniform-input .q-field__control {
  padding-bottom: 0 !important;
  height: 40px !important;
}
.uniform-input .q-field__bottom {
  padding-top: 4px !important;
  min-height: 0 !important;
  height: auto !important;
}
.uniform-input.q-field--readonly .q-field__control {
  padding-bottom: 0 !important;
  background: var(--q-filled-bg) !important;
  opacity: 1 !important;
  cursor: default !important;
}
.uniform-input:not(.q-field--error) .q-field__bottom {
  display: none !important;
}
.uniform-input.q-field--error .q-field__bottom {
  padding-top: 4px !important;
}
@media (max-height: 600px) {
  .fixed-section {
    padding: 8px;
  }
  .fixed-section .q-avatar {
    size: 60px;
  }
}
</style>
