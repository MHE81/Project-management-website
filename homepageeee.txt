<template>
  <q-page class="q-pa-md">
    <!-- Top bar -->
    <div class="row justify-between items-center q-mb-md">
      <div class="text-h6">Date: {{ currentDate }}</div>
      <div class="q-gutter-sm">
        <q-btn
          round
          color="primary"
          icon="account_circle"
          @click="openProfile"
          aria-label="Go to profile"
        />
        <q-btn round flat color="negative" icon="logout" @click="logout" aria-label="Log out" />
      </div>
    </div>
    <q-toggle
      v-model="sortByPriority"
      label="Sort by"
      left-label
      checked-icon="sort"
      unchecked-icon="event"
      color="primary"
    />

    <!-- Error Banner -->
    <q-banner
      v-if="errorMessage"
      dense
      class="bg-negative text-white q-mb-md"
      aria-live="polite"
      role="alert"
    >
      {{ errorMessage }}
    </q-banner>

    <!-- Messages Banner -->
    <q-banner
      v-if="messages.length"
      dense
      class="bg-blue-9 text-white q-mb-md"
      style="width: 50%;"
      aria-live="polite"
      role="alert"
    >
      <div>Messages ({{ messages.length }})</div>
      <q-list dense>
        <q-item
          v-for="(message, index) in messages"
          :key="index"
          class="q-py-xs"
        >
          <q-item-section>{{ message.text }}</q-item-section>
          <q-item-section side>
            <q-btn
              flat
              round
              icon="delete"
              color="white"
              size="sm"
              @click="deleteMessage(index)"
              aria-label="Delete message"
            />
          </q-item-section>
        </q-item>
      </q-list>
    </q-banner>

    <!-- Main layout -->
    <div class="row" style="height: calc(100vh - 120px)">
      <!-- Main content area -->
      <div
        class="col bg-grey-2 rounded-borders q-pa-md overflow-y-auto"
        style="margin-right: 280px; margin-bottom: 10px; width: calc(100% - 280px)"
      >
        <div class="row" style="min-height: 100%; flex-wrap: nowrap">
          <!-- Backlog Column -->
          <div class="col-4" @dragover.prevent @drop="handleDrop('backlog')">
            <div class="text-center text-subtitle2 q-mb-sm">Backlog</div>
            <div
              v-for="item in sortedItems('backlog')"
              :key="item.id"
              class="q-mb-sm bg-white q-pa-sm shadow-1 row justify-between items-center"
              :draggable="canEdit(item)"
              @dragstart="startDrag(item)"
              @click="viewItem(item.id)"
            >
              <div>
                <strong>{{ item.type }}</strong
                >: {{ item.title }} (Due: {{ item.deadline || 'N/A' }})
              </div>
              <q-btn
                flat
                round
                icon="delete"
                color="negative"
                size="sm"
                @click.stop="deleteItem(item.id)"
                :disable="!canEdit(item)"
              />
            </div>
          </div>

          <!-- In Progress Column -->
          <div class="col-4 divider-col" @dragover.prevent @drop="handleDrop('in progress')">
            <div class="text-center text-subtitle2 q-mb-sm">In Progress</div>
            <div
              v-for="item in sortedItems('In Progress')"
              :key="item.id"
              class="q-mb-sm bg-white q-pa-sm shadow-1 row justify-between items-center"
              :draggable="canEdit(item)"
              @dragstart="startDrag(item)"
              @click="viewItem(item.id)"
            >
              <div>
                <strong>{{ item.type }}</strong
                >: {{ item.title }} (Due: {{ item.deadline || 'N/A' }})
              </div>
              <q-btn
                flat
                round
                icon="delete"
                color="negative"
                size="sm"
                @click.stop="deleteItem(item.id)"
                :disable="!canEdit(item)"
              />
            </div>
          </div>

          <!-- Done Column -->
          <div class="col-4 divider-col" @dragover.prevent @drop="handleDrop('done')">
            <div class="text-center text-subtitle2 q-mb-sm">Done</div>
            <div
              v-for="item in sortedItems('done')"
              :key="item.id"
              class="q-mb-sm bg-white q-pa-sm shadow-1 row justify-between items-center"
              :draggable="canEdit(item)"
              @dragstart="startDrag(item)"
              @click="viewItem(item.id)"
            >
              <div>
                <strong>{{ item.type }}</strong
                >: {{ item.title }} (Due: {{ item.deadline || 'N/A' }})
              </div>
              <q-btn
                flat
                round
                icon="delete"
                color="negative"
                size="sm"
                @click.stop="deleteItem(item.id)"
                :disable="!canEdit(item)"
              />
            </div>
          </div>
        </div>
      </div>

      <!-- Right-side Form Panel -->
      <div
        class="fixed-top-right"
        style="
          width: 260px;
          top: 60px;
          right: 10px;
          bottom: 10px;
          overflow-y: auto;
          padding: 10px 0px;
        "
      >
        <q-btn
          label="Add Item"
          icon="add"
          color="secondary"
          class="full-width q-mb-md"
          @click="toggleForm = !toggleForm"
        />

        <!-- Invitations Banner -->
        <q-banner
          dense
          class="bg-yellow-9 text-white q-mb-md"
          aria-live="polite"
          role="alert"
        >
          <template v-if="pendingInvitations.length">
            Invitations ({{ pendingInvitations.length }})
            <q-btn
              flat
              label="View"
              color="white"
              @click="showInvitationsDialog = true"
              aria-label="View pending invitations"
            />
          </template>
          <template v-else>
            Invitations
          </template>
        </q-banner>

        <!-- Progress Chart -->
        <div class="q-my-md flex flex-center">
          <q-circular-progress
            show-value
            :value="completionPercent"
            size="80px"
            color="green"
            track-color="grey-3"
          >
            {{ completionPercent }}%
          </q-circular-progress>
        </div>

        <!-- Item Form -->
        <div v-if="toggleForm" class="bg-white">
          <q-form @submit.prevent="addItem" style="padding: 5px 15px">
            <q-select
              v-model="itemForm.type"
              :options="['Task', 'Project', 'Portfolio', 'Other']"
              label="Item Type (select or type)"
              dense
              use-input
              input-debounce="0"
              :error="!itemForm.type && formSubmitted"
              error-message="Item Type is required"
            />
            <q-input
              v-model="itemForm.title"
              label="Item Title"
              dense
              :error="!itemForm.title && formSubmitted"
              error-message="Title is required"
            />
            <q-input
              v-model="itemForm.deadline"
              label="Deadline"
              dense
              type="datetime-local"
              :error="!itemForm.deadline && formSubmitted"
              error-message="Deadline is required"
            />
            <q-select
              v-model="itemForm.status"
              :options="statusOptions"
              label="Status"
              dense
              :error="!itemForm.status && formSubmitted"
              error-message="Status is required"
            />
            <q-select
              v-model="itemForm.priority"
              :options="['Low', 'Medium', 'High']"
              label="Priority"
              dense
              :error="!itemForm.priority && formSubmitted"
              error-message="Priority is required"
            />
            <q-select
              v-model="itemForm.category"
              :options="categoryOptions"
              use-input
              use-chips
              label="Category"
              multiple
              dense
            />
            <div class="q-mt-sm">
              <div class="text-subtitle2">Subitems</div>
              <div
                v-for="(subitem, index) in itemForm.subitems"
                :key="index"
                class="row items-center q-mb-xs"
              >
                <q-select
                  v-model="itemForm.subitems[index].type"
                  :options="['Task', 'Project', 'Portfolio', 'Other']"
                  label="Subitem Type"
                  dense
                  use-input
                  input-debounce="0"
                  :error="!itemForm.subitems[index].type && formSubmitted"
                  error-message="Subitem Type is required"
                />
                <q-input
                  v-model="itemForm.subitems[index].title"
                  label="Subitem Title"
                  dense
                  class="q-ml-sm"
                  :error="!itemForm.subitems[index].title && formSubmitted"
                  error-message="Subitem Title is required"
                />
                <q-input
                  v-model="itemForm.subitems[index].deadline"
                  label="Deadline"
                  dense
                  type="datetime-local"
                  :max="itemForm.deadline || undefined"
                  :error="!itemForm.subitems[index].deadline && formSubmitted"
                  error-message="Deadline is required"
                  class="q-ml-sm"
                />
                <q-select
                  v-model="itemForm.subitems[index].status"
                  :options="statusOptions"
                  label="Status"
                  dense
                  class="q-ml-sm"
                  :error="!itemForm.subitems[index].status && formSubmitted"
                  error-message="Status is required"
                />
                <q-select
                  v-model="itemForm.subitems[index].priority"
                  :options="['Low', 'Medium', 'High']"
                  label="Priority"
                  dense
                  class="q-ml-sm"
                  :error="!itemForm.subitems[index].priority && formSubmitted"
                  error-message="Priority is required"
                />
                <q-btn
                  flat
                  round
                  icon="remove"
                  color="negative"
                  size="sm"
                  @click="itemForm.subitems.splice(index, 1)"
                />
              </div>
              <q-btn
                flat
                icon="add"
                size="sm"
                color="secondary"
                @click="
                  itemForm.subitems.push({
                    type: '',
                    title: '',
                    deadline: '',
                    status: 'backlog',
                    priority: 'Low',
                  })
                "
              />
            </div>
            <q-btn type="submit" label="Save Item" color="secondary" class="q-mt-sm full-width" />
          </q-form>
        </div>
      </div>
    </div>

    <!-- Invitations Dialog -->
    <q-dialog v-model="showInvitationsDialog" persistent>
      <q-card style="width: 600px; max-width: 90vw;">
        <q-card-section>
          <div class="text-h6">Pending Invitations</div>
        </q-card-section>
        <q-card-section>
          <q-list v-if="pendingInvitations.length" bordered>
            <q-item
              v-for="invitation in pendingInvitations"
              :key="invitation.itemId + '-' + invitation.username"
            >
              <q-item-section>
                <q-item-label>
                  Invited to: {{ getItemTitle(invitation.itemId) }} (Role: {{ invitation.role }})
                </q-item-label>
                <q-item-label caption>
                  Invited at: {{ new Date(invitation.invitedAt).toLocaleString('en-US', { timeZone: 'Asia/Dubai' }) }}
                </q-item-label>
              </q-item-section>
              <q-item-section side>
                <q-btn
                  flat
                  color="positive"
                  label="Accept"
                  @click="acceptInvitation(invitation)"
                />
                <q-btn
                  flat
                  color="negative"
                  label="Reject"
                  @click="rejectInvitation(invitation)"
                />
              </q-item-section>
            </q-item>
          </q-list>
          <div v-else class="text-negative">No pending invitations</div>
        </q-card-section>
        <q-card-actions align="right">
          <q-btn flat label="Close" color="primary" v-close-popup />
        </q-card-actions>
      </q-card>
    </q-dialog>
  </q-page>
</template>

<script setup>
import { ref, computed, onMounted, watch, nextTick } from 'vue'
import { useRouter } from 'vue-router'

const router = useRouter()
const currentDate = new Date().toLocaleDateString('en-US', { timeZone: 'Asia/Dubai' })
const items = ref([])
const sortByPriority = ref(false)
const toggleForm = ref(false)
const formSubmitted = ref(false)
const errorMessage = ref('')
const pendingInvitations = ref([])
const showInvitationsDialog = ref(false)
const messages = ref([])

const categoryOptions = ref(['Development', 'Design', 'Marketing', 'Research', 'Others'])
const statusOptions = ref(['Backlog', 'In Progress', 'Done'])

const itemForm = ref({
  type: '',
  title: '',
  deadline: '',
  category: [],
  subitems: [],
  shareWith: [],
  priority: '',
  status: '',
})

const currentUser = ref(JSON.parse(localStorage.getItem('userProfile') || '{}')?.username || '')

onMounted(() => {
  const token = localStorage.getItem('authToken')
  if (!token) {
    console.log('User not authenticated, redirecting to login')
    router.push('/login')
  }
  loadItems()
  loadInvitations()
  loadMessages()
})

const loadItems = () => {
  const savedItems = localStorage.getItem(`kanbanItems_${currentUser.value}`)
  if (savedItems) {
    items.value = JSON.parse(savedItems)
  }
}

const loadInvitations = () => {
  const invitations = JSON.parse(localStorage.getItem(`kanbanInvitations_${currentUser.value}`) || '[]')
  pendingInvitations.value = invitations.filter(
    inv => inv.username === currentUser.value && inv.status === 'pending'
  )
}

const loadMessages = () => {
  const savedMessages = JSON.parse(localStorage.getItem(`kanbanMessages_${currentUser.value}`) || '[]')
  messages.value = savedMessages
}

const saveItems = () => {
  localStorage.setItem(`kanbanItems_${currentUser.value}`, JSON.stringify(items.value))
}

const saveInvitations = (invitations, username) => {
  localStorage.setItem(`kanbanInvitations_${username}`, JSON.stringify(invitations))
}

const saveMessages = () => {
  localStorage.setItem(`kanbanMessages_${currentUser.value}`, JSON.stringify(messages.value))
}

const canEdit = (item) => {
  return (
    item.creator === currentUser.value ||
    item.shareWith?.some(
      (share) => share.username === currentUser.value && share.role === 'owner'
    )
  )
}

const acceptInvitation = (invitation) => {
  const invitations = JSON.parse(localStorage.getItem(`kanbanInvitations_${currentUser.value}`) || '[]')
  const index = invitations.findIndex(
    inv => inv.itemId === invitation.itemId && inv.username === invitation.username
  )
  if (index !== -1) {
    invitations[index].status = 'accepted'
    saveInvitations(invitations, currentUser.value)

    const creatorItems = JSON.parse(localStorage.getItem(`kanbanItems_${invitation.invitedBy}`) || '[]')
    const sharedItem = findItemById(creatorItems, invitation.itemId)
    if (sharedItem) {
      // Update shareWith in creator's item to remove pending status for all items and subitems
      const creatorShareIndex = sharedItem.shareWith.findIndex(s => s.username === currentUser.value)
      if (creatorShareIndex !== -1) {
        sharedItem.shareWith[creatorShareIndex] = {
          username: currentUser.value,
          role: invitation.role
        }
        // Explicitly update subitems to remove pending status
        const updateSubitemsPendingStatus = (item) => {
          if (item.subitems) {
            item.subitems.forEach(subitem => {
              const subitemShareIndex = subitem.shareWith.findIndex(s => s.username === currentUser.value)
              if (subitemShareIndex !== -1) {
                subitem.shareWith[subitemShareIndex] = {
                  username: currentUser.value,
                  role: invitation.role
                }
              }
              updateSubitemsPendingStatus(subitem)
            })
          }
        }
        updateSubitemsPendingStatus(sharedItem)
        updateItemInUserStorage(sharedItem, invitation.invitedBy)

        // Add item to user's items
        const userItems = JSON.parse(localStorage.getItem(`kanbanItems_${currentUser.value}`) || '[]')
        const itemCopy = JSON.parse(JSON.stringify(sharedItem))
        itemCopy.shareWith = itemCopy.shareWith.map(s => ({
          username: s.username,
          role: s.role
        }))
        // Ensure subitems also have pending status removed
        const cleanSubitemsPendingStatus = (item) => {
          if (item.subitems) {
            item.subitems.forEach(subitem => {
              subitem.shareWith = subitem.shareWith.map(s => ({
                username: s.username,
                role: s.role
              }))
              cleanSubitemsPendingStatus(subitem)
            })
          }
        }
        cleanSubitemsPendingStatus(itemCopy)
        userItems.push(itemCopy)
        localStorage.setItem(`kanbanItems_${currentUser.value}`, JSON.stringify(userItems))
        items.value = userItems

        // Update other shared users
        updateSharedItems(sharedItem, invitation.invitedBy)
      }
    }
    loadInvitations()
  }
}

const rejectInvitation = (invitation) => {
  const invitations = JSON.parse(localStorage.getItem(`kanbanInvitations_${currentUser.value}`) || '[]')
  const index = invitations.findIndex(
    inv => inv.itemId === invitation.itemId && inv.username === invitation.username
  )
  if (index !== -1) {
    invitations.splice(index, 1)
    saveInvitations(invitations, currentUser.value)

    // Remove from creator's shareWith
    const creatorItems = JSON.parse(localStorage.getItem(`kanbanItems_${invitation.invitedBy}`) || '[]')
    const sharedItem = findItemById(creatorItems, invitation.itemId)
    if (sharedItem) {
      sharedItem.shareWith = sharedItem.shareWith.filter(s => s.username !== currentUser.value)
      updateSubitemsShareWith(sharedItem, sharedItem.shareWith)
      updateItemInUserStorage(sharedItem, invitation.invitedBy)
      updateSharedItems(sharedItem, invitation.invitedBy)
    }

    // Add rejection message for the inviter
    const inviterMessages = JSON.parse(localStorage.getItem(`kanbanMessages_${invitation.invitedBy}`) || '[]')
    const itemName = sharedItem ? `${sharedItem.type}: ${sharedItem.title}` : 'Unknown Item'
    inviterMessages.push({
      text: `${currentUser.value} rejected invite for ${itemName}`,
      timestamp: Date.now()
    })
    localStorage.setItem(`kanbanMessages_${invitation.invitedBy}`, JSON.stringify(inviterMessages))
    loadInvitations()
  }
}

const deleteMessage = (index) => {
  messages.value.splice(index, 1)
  saveMessages()
}

const findItemById = (items, id) => {
  for (let item of items) {
    if (item.id === id) return item
    if (item.subitems) {
      const found = findItemById(item.subitems, id)
      if (found) return found
    }
  }
  return null
}

const updateItemInUserStorage = (updatedItem, username) => {
  const userItems = JSON.parse(localStorage.getItem(`kanbanItems_${username}`) || '[]')
  const updateItem = (items, itemToUpdate) => {
    for (let i = 0; i < items.length; i++) {
      if (items[i].id === itemToUpdate.id) {
        items[i] = { ...itemToUpdate }
        return true
      }
      if (items[i].subitems && updateItem(items[i].subitems, itemToUpdate)) {
        return true
      }
    }
    return false
  }
  updateItem(userItems, updatedItem)
  localStorage.setItem(`kanbanItems_${username}`, JSON.stringify(userItems))
}

const updateSubitemsShareWith = (item, shareWith) => {
  if (item.subitems) {
    item.subitems.forEach(subitem => {
      subitem.shareWith = shareWith.map(s => ({ ...s }))
      updateSubitemsShareWith(subitem, shareWith)
    })
  }
}

const getItemTitle = (itemId) => {
  const item = findItemById(items.value, itemId)
  return item ? `${item.type}: ${item.title}` : 'Unknown Item'
}

const logout = () => {
  localStorage.removeItem('authToken')
  localStorage.removeItem('userProfile')
  router.push('/login')
  console.log('User logged out')
}

const addItem = () => {
  formSubmitted.value = true
  if (
    !itemForm.value.type ||
    !itemForm.value.title ||
    !itemForm.value.deadline ||
    !itemForm.value.status ||
    !itemForm.value.priority
  ) {
    errorMessage.value = 'Please fill all required fields'
    return
  }

  const hasInvalidSubitemDeadline = itemForm.value.subitems.some(subitem => {
    if (subitem.deadline && itemForm.value.deadline) {
      return new Date(subitem.deadline) > new Date(itemForm.value.deadline)
    }
    return false
  })
  if (hasInvalidSubitemDeadline) {
    errorMessage.value = 'Subitem deadline cannot be after the parent item deadline.'
    return
  }

  const statusMap = {
    Backlog: 'backlog',
    'In Progress': 'in progress',
    Done: 'done',
  }
  const parentId = Date.now()
  const newItem = {
    id: parentId,
    type: itemForm.value.type,
    title: itemForm.value.title,
    deadline: itemForm.value.deadline,
    status: statusMap[itemForm.value.status] || 'in progress',
    priority: itemForm.value.priority,
    category: itemForm.value.category,
    subitems: itemForm.value.subitems.map((subitem, index) => ({
      id: parentId + index + 1,
      type: subitem.type,
      title: subitem.title,
      deadline: subitem.deadline,
      status: subitem.status || 'backlog',
      priority: subitem.priority || 'Low',
      parentId: parentId,
      category: itemForm.value.category, // Set subitem category to parent category
      shareWith: [{ username: currentUser.value, role: 'owner' }],
      movedToDoneAt: null,
      creator: currentUser.value,
      assignedTo: null,
      note: '',
      reports: []
    })),
    shareWith: [{ username: currentUser.value, role: 'owner' }],
    movedToDoneAt: itemForm.value.status === 'Done' ? Date.now() : null,
    creator: currentUser.value,
    assignedTo: null,
    note: '',
    reports: []
  }
  items.value.push(newItem)

  resetForm(itemForm)
  toggleForm.value = false
  formSubmitted.value = false
  saveItems()
  errorMessage.value = ''
}

const viewItem = (id) => {
  router.push(`/itemDetail/${id}`)
}

function resetForm(form) {
  Object.keys(form.value).forEach(
    (key) => (form.value[key] = Array.isArray(form.value[key]) ? [] : ''),
  )
  form.value.shareWith = []
}

const deleteItem = (id) => {
  const item = findItemById(items.value, id)
  if (!canEdit(item)) {
    errorMessage.value = 'Only the owner or admin can delete this item.'
    return
  }

  // Remove item from all shared users
  const shareUsernames = item.shareWith
    .filter(share => share.username !== currentUser.value)
    .map(share => share.username)
  shareUsernames.forEach(username => {
    const userItems = JSON.parse(localStorage.getItem(`kanbanItems_${username}`) || '[]')
    const newUserItems = userItems.filter(i => i.id !== id)
    localStorage.setItem(`kanbanItems_${username}`, JSON.stringify(newUserItems))

    // Remove invitations
    const invitations = JSON.parse(localStorage.getItem(`kanbanInvitations_${username}`) || '[]')
    const newInvitations = invitations.filter(inv => inv.itemId !== id)
    localStorage.setItem(`kanbanInvitations_${username}`, JSON.stringify(newInvitations))
  })

  // Remove item from current user's items
  items.value = items.value.filter(i => i.id !== id)
  saveItems()
}

function openProfile() {
  router.push('/profile')
  console.log('Navigating to profile')
}

const draggedItem = ref(null)
const startDrag = (item) => {
  if (canEdit(item)) {
    draggedItem.value = item
  }
}

const handleDrop = (newStatus) => {
  if (!draggedItem.value || !canEdit(draggedItem.value)) return
  if (newStatus === 'done') {
    const allSubitemsDone =
      !draggedItem.value.subitems ||
      draggedItem.value.subitems.every((sub) => sub.status === 'done')
    if (!allSubitemsDone) {
      errorMessage.value = 'Cannot move to Done: All subitems must be in Done status.'
      return
    }
    draggedItem.value.movedToDoneAt = Date.now()
  }
  draggedItem.value.status = newStatus
  updateSharedItems(draggedItem.value, currentUser.value)
  items.value = [...items.value]
  saveItems()
  errorMessage.value = ''
  draggedItem.value = null
}

const updateSharedItems = (updatedItem, sourceUser) => {
  const shareUsernames = updatedItem.shareWith
    .filter(share => share.username !== sourceUser && (!share.status || share.status !== 'pending'))
    .map(share => share.username)
  shareUsernames.forEach(username => {
    const userItems = JSON.parse(localStorage.getItem(`kanbanItems_${username}`) || '[]')
    const targetItem = findItemById(userItems, updatedItem.id)
    if (targetItem) {
      Object.assign(targetItem, JSON.parse(JSON.stringify(updatedItem)))
      updateSubitemsShareWith(targetItem, updatedItem.shareWith)
      localStorage.setItem(`kanbanItems_${username}`, JSON.stringify(userItems))
    }
  })
}

const completionPercent = computed(() => {
  const rootItems = items.value.filter((item) => !item.parentId || item.shareWith?.some(
    (share) => share.username === currentUser.value && (share.role === 'admin' || share.role === 'owner') && !share.status
  ))
  if (rootItems.length === 0) return 0
  const doneItems = rootItems.filter((item) => item.status?.toLowerCase() === 'done').length
  return Math.round((doneItems / rootItems.length) * 100)
})

const priorityMap = {
  High: 3,
  Medium: 2,
  Low: 1,
  '': 0,
}

const sortedItems = (status) => {
  const statusMap = {
    Backlog: 'backlog',
    'In Progress': 'in progress',
    Done: 'done',
  }
  const normalizedStatus = statusMap[status] || status.toLowerCase()
  const filtered = items.value.filter((item) => {
    const itemStatus = item.status?.toLowerCase() || ''
    return (
      (!item.parentId || item.shareWith?.some(
        (share) => share.username === currentUser.value && (share.role === 'admin' || share.role === 'owner') && !share.status
      )) && itemStatus === normalizedStatus
    )
  })
  if (status === 'done') {
    return filtered.sort((a, b) => (a.movedToDoneAt || 0) - (b.movedToDoneAt || 0))
  }
  if (sortByPriority.value) {
    return filtered.sort((a, b) => {
      const priorityA = priorityMap[a.priority] || 0
      const priorityB = priorityMap[b.priority] || 0
      return priorityB - priorityA
    })
  }
  return filtered.sort((a, b) => new Date(a.deadline) - new Date(b.deadline))
}

watch(
  () => localStorage.getItem(`kanbanItems_${currentUser.value}`),
  async (newValue) => {
    if (newValue) {
      items.value = JSON.parse(newValue)
      await nextTick()
    }
  },
)

watch(
  () => localStorage.getItem(`kanbanInvitations_${currentUser.value}`),
  () => {
    loadInvitations()
  },
)

watch(
  () => localStorage.getItem(`kanbanMessages_${currentUser.value}`),
  () => {
    loadMessages()
  },
)
</script>

<style scoped>
.divider-col {
  border-left: 1px solid #ccc;
  padding-left: 8px;
}
</style>