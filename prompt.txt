if user has chosen a profile image the picture should be shown in the pages (circle) instead of the profile icon and if there is no profile image, the current icon should be there.
if both senarios the imapge or icon should be the button that goes to the user profile
explain in farsi.






این اتفاقیه که توی اجرا افتاد:
کاربر 1 به عنوان مالک در صفحه ایتم 1، آیتم1 (که شامل زیر ایتم های 1.1 . 1.2 هست) رو با  کاربر 2 با یک نقشی به اشتراک گذاشت و در ایتم و همه زیرایتم هاش حالت کاربر 2 pending شد
کاربر 2 دعوتنامه رو قبول کرد و ایتم به صفحه کاربر 2 اضافه شد و در صفحه ایتم1 و زیر ایتم ها در صفحه کاربر 2 حالت کاربر 2 بدون pending شد
در صفحه کاربر 1 در صفحه جزییات ایتم 1 کاربر 2 بدون حالت شد اما در صفحه زیرایتم های 1.1 و 1.2 حالت کاربر 2 همچنان pending بود
سپس کاربر 1 به عنوان مالک در صفحه ایتم 1، آیتم1 (که شامل زیر ایتم های 1.1 . 1.2 هست) رو با  کاربر 3 با یک نقشی به اشتراک گذاشت و در ایتم و همه زیرایتم هاش حالت کاربر 3 pending شد و حالت pending کاربر 2 در زیر ایتیم ها از بین رفت
کاربر 3 دعوتنامه رو قبول کرد و ایتم به صفحه کاربر 3 اضافه شد و در صفحه ایتم1 و زیر ایتم ها در صفحه کاربر 3 حالت کاربر 3 بدون pending شد
در صفحه کاربر 1 در صفحه جزییات کار ایتم 1 کاربر 3 بدون حالت شد اما در صفحه زیرایتم های 1.1 و 1.2 حالت کاربر 3 همچنان pending بود و کاربر 2 بدون حالت شد

یک بار هم کاربر 1 به  عنوان مالک، آیتم 1 را همزمان با هر دو کاربر 2 و 3 را به اشتراک گذاشت
هر دو کاربر دعوتنامه را پذیرفتند و ایتم به صفحه هر دو اضافه شد و حالت هر دو کاربر در صفحه های ایتم1 و زیر ایتم های ان بدون حالت شد
و در صفحه ایتم 1 کاربر 1 هر دو بدون حالت شدند اما در صفحه زیر ایتم های ایتم 1 حالت کاربر 2 و 3 pending بود!

باید اینجوری باشه که تا قبل از اینکه کاربر دعوت شده دعوتنامه رو بپذیرفت توی ایتم و همه زیرایتم هاش حالت pending داشته باشن
ولی بعد از پذیرش دعوتنامه، حالت کاربر در صفحه همه کاربران و خود اتیم و زیر ایتم هاش بدوم حالت باشه
و این اتفاق باید بدون استثنا اتفاق بیوفته
ازت میخوام فقط این مشکل رو حل کنی و به هیچ چیز دیگه ای در کد ها دست نزنی چون همه چیز عالیه
کد itemdetail فعلی:
<template>
  <q-page class="q-pa-md bg-primary" style="min-height: 100vh; overflow-y: auto">
    <!-- Loading State -->
    <div v-if="!item && !errorMessage" class="text-center q-mt-lg">
      <q-spinner color="primary" size="3em" />
      <div>Loading item...</div>
    </div>
    <!-- Item Name and User Role -->
    <div v-if="item" class="text-h4 q-mb-md text-center full-width">
      {{ item.type || 'Item' }}: {{ item.title || 'Untitled' }}
    </div>
    <div v-if="item" class="text-subtitle1 q-mb-md text-center">
      Your Role: {{ currentUserRole }}
    </div>
    <div v-else-if="errorMessage" class="text-h4 q-mb-md text-center full-width text-negative">
      {{ errorMessage }} (ID: {{ route.params.id }})
    </div>

    <!-- Top bar -->
    <div class="row justify-between items-center q-mb-md">
      <div class="text-h6">Date: {{ currentDate }}</div>
      <div class="q-gutter-sm">
        <q-btn
          round
          color="primary"
          icon="account_circle"
          @click="openProfile"
          aria-label="Go to profile"
        />
        <q-btn round flat color="negative" icon="logout" @click="logout" aria-label="Log out" />
      </div>
    </div>

    <!-- Error Banner -->
    <q-banner
      v-if="errorMessage"
      dense
      class="bg-negative text-white q-mb-md"
      aria-live="polite"
      role="alert"
    >
      {{ errorMessage }}
    </q-banner>

    <!-- New Report Form -->
    <div v-if="item && isAddingReport && !selectedReport" class="q-mb-md">
      <div class="text-subtitle1">New Report:</div>
      <q-input
        v-model="newReportDetails"
        placeholder="Enter what you have done..."
        dense
        :error="!newReportDetails && reportFormSubmitted"
        error-message="Details are required"
        class="q-mb-md"
        :disable="!canEdit"
      />
      <div class="row">
        <q-btn
          label="Save Report"
          color="positive"
          @click="saveReport"
          class="q-mr-sm"
          :disable="!canEdit"
        />
        <q-btn label="Cancel" color="negative" flat @click="cancelReport" />
      </div>
    </div>

    <!-- Selected Report Display (Editable) -->
    <div v-if="item && selectedReport" class="q-mb-md">
      <div class="text-subtitle1">Editing Report:</div>
      <textarea
        v-model="selectedReport.details"
        placeholder="Edit your report here..."
        class="resizable-note custom-textarea"
        :disabled="!canEdit"
      />
      <div class="row q-mt-sm">
        <q-btn
          label="Save Report"
          color="positive"
          @click="saveEditedReport"
          class="q-mr-sm"
          :disable="!canEdit"
        />
        <q-btn label="Cancel" color="negative" flat @click="cancelEditReport" />
      </div>
    </div>

    <!-- Note Display -->
    <div v-if="item && item.note && !isEditingNote" class="q-mb-md">
      <div class="text-subtitle1">Note:</div>
      <div
        class="q-pa-sm bg-grey-2 rounded-borders resizable-note"
        v-html="item.note.replace(/\n/g, '<br>')"
      ></div>
      <div class="row q-mt-sm">
        <q-btn
          label="Edit Note"
          color="primary"
          @click="toggleNoteEdit(true)"
          class="q-mr-sm"
          :disable="!canEdit"
        />
        <q-btn label="Delete Note" color="negative" flat @click="deleteNote" :disable="!canEdit" />
      </div>
    </div>

    <!-- Note Edit Form -->
    <div v-if="item && isEditingNote" class="q-mb-md">
      <div class="text-subtitle1">Edit Note:</div>
      <textarea
        v-model="item.note"
        placeholder="Enter your note here..."
        class="resizable-note custom-textarea"
        :disabled="!canEdit"
      />
      <div class="row q-mt-sm">
        <q-btn
          label="Save Note"
          color="positive"
          @click="saveNote"
          class="q-mr-sm"
          :disable="!canEdit"
        />
        <q-btn label="Cancel" color="negative" flat @click="cancelNoteEdit" />
      </div>
    </div>
    <q-btn
      v-if="item && !item.note && !isEditingNote"
      label="Add Note"
      color="secondary"
      @click="toggleNoteEdit(true)"
      class="q-mb-md"
      :disable="!canEdit"
    />

    <!-- Parent Chain Info -->
    <div v-if="parentChain.length" class="text-subtitle1 q-mb-md">
      <span>
        <span v-for="(parent, index) in parentChain" :key="parent.id">
          {{ parent.type }}: {{ parent.title }}{{ index < parentChain.length - 1 ? ' -> ' : '' }}
        </span>
        -> <strong>{{ item.type }}: {{ item.title }}</strong>
      </span>
    </div>

    <!-- Main layout -->
    <div v-if="item" class="row equal-height-row">
      <!-- Left Side Box (Item Details) -->
      <div class="col-2 bg-grey-2 rounded-borders q-pa-md column-box" style="margin-right: 10px">
        <div class="bg-white" style="padding: 15px">
          <div class="text-subtitle2 q-mb-xs">Details</div>
          <div>Type: {{ item.type || 'N/A' }}</div>
          <q-input
            v-model="item.title"
            label="Title"
            dense
            :error="!item.title && formSubmitted"
            :disable="!isEditing || !canEdit"
            error-message="Title is required"
            class="q-mt-md"
          />
          <q-input
            v-model="item.deadline"
            label="Deadline"
            dense
            type="datetime-local"
            :disable="!isEditing || !canEdit"
            :max="directParent?.deadline || undefined"
            class="q-mt-md"
          />
          <q-select
            v-model="item.status"
            :options="statusOptions"
            label="Status"
            dense
            :disable="!isEditing || !canEdit"
            class="q-mt-md"
          />
          <q-select
            v-model="item.priority"
            :options="['Low', 'Medium', 'High']"
            label="Priority"
            dense
            :disable="!isEditing || !canEdit"
            class="q-mt-md"
          />
          <q-select
            v-model="item.category"
            :options="categoryOptions"
            use-input
            use-chips
            label="Category"
            multiple
            dense
            :disable="!isEditing || !canEdit"
            class="q-mt-md"
          />
          <q-btn
            v-if="!isEditing"
            label="Edit"
            color="primary"
            class="full-width q-mt-md"
            @click="toggleEdit(true)"
            :disable="!canEdit"
          />
          <q-btn
            v-else
            label="Save"
            color="positive"
            class="full-width q-mt-md"
            @click="saveDetails"
            :disable="!canEdit"
          />
        </div>
      </div>

      <!-- Main Content Area (Subitems Kanban) -->
      <div class="col-7 bg-grey-2 rounded-borders q-pa-md column-box" style="overflow-y: auto">
        <q-toggle
          v-model="sortByPriority"
          label="Sort by"
          left-label
          checked-icon="sort"
          unchecked-icon="event"
          color="primary"
          class="q-mb-md"
          @update:model-value="sortSubitems"
        />
        <div class="row" style="flex-wrap: nowrap; height: 100%">
          <!-- Backlog Column -->
          <div class="col-4" @dragover.prevent @drop="handleDrop('backlog')">
            <div class="text-center text-subtitle2 q-mb-sm">Backlog</div>
            <div
              v-for="subitem in sortedSubitems('backlog')"
              :key="subitem.id"
              class="q-mb-xs bg-white q-pa-sm shadow-1 row justify-between items-center"
              :draggable="canEdit"
              @dragstart="startDrag(subitem)"
              @click="viewItem(subitem.id)"
            >
              <div>
                <strong>{{ subitem.type }}</strong
                >: {{ subitem.title }} (Due: {{ subitem.deadline || 'N/A' }})
                <div v-if="subitem.assignedTo" class="text-caption">
                  Assigned: {{ subitem.assignedTo.username }} ({{ subitem.assignedTo.role }})
                </div>
                <div v-if="subitem.shareWith && subitem.shareWith.length" class="text-caption">
                  Shared:
                  {{
                    subitem.shareWith
                      .map(
                        (s) =>
                          `${s.username} (${s.role}${s.status === 'pending' ? ', Pending' : ''})`,
                      )
                      .join(', ')
                  }}
                </div>
              </div>
              <q-btn
                flat
                round
                icon="delete"
                color="negative"
                size="sm"
                @click.stop="deleteItem(subitem.id)"
                :disable="!canAddSubitems"
              />
            </div>
          </div>

          <!-- In Progress Column -->
          <div class="col-4 divider-col" @dragover.prevent @drop="handleDrop('in progress')">
            <div class="text-center text-subtitle2 q-mb-md">In Progress</div>
            <div
              v-for="subitem in sortedSubitems('in progress')"
              :key="subitem.id"
              class="q-mb-xs bg-white q-pa-sm shadow-1 row justify-between items-center"
              :draggable="canEdit"
              @dragstart="startDrag(subitem)"
              @click="viewItem(subitem.id)"
            >
              <div>
                <strong>{{ subitem.type }}</strong
                >: {{ subitem.title }} (Due: {{ subitem.deadline || 'N/A' }})
                <div v-if="subitem.assignedTo" class="text-caption">
                  Assigned: {{ subitem.assignedTo.username }} ({{ subitem.assignedTo.role }})
                </div>
                <div v-if="subitem.shareWith && subitem.shareWith.length" class="text-caption">
                  Shared:
                  {{
                    subitem.shareWith
                      .map(
                        (s) =>
                          `${s.username} (${s.role}${s.status === 'pending' ? ', Pending' : ''})`,
                      )
                      .join(', ')
                  }}
                </div>
              </div>
              <q-btn
                flat
                round
                icon="delete"
                color="negative"
                size="sm"
                @click.stop="deleteItem(subitem.id)"
                :disable="!canAddSubitems"
              />
            </div>
          </div>

          <!-- Done Column -->
          <div class="col-4 divider-col" @dragover.prevent @drop="handleDrop('done')">
            <div class="text-center text-subtitle2 q-mb-md">Done</div>
            <div
              v-for="subitem in sortedSubitems('done')"
              :key="subitem.id"
              class="q-mb-xs bg-white q-pa-sm shadow-1 row justify-between items-center"
              :draggable="canEdit"
              @dragstart="startDrag(subitem)"
              @click="viewItem(subitem.id)"
            >
              <div>
                <strong>{{ subitem.type }}</strong
                >: {{ subitem.title }} (Due: {{ subitem.deadline || 'N/A' }})
                <div v-if="subitem.assignedTo" class="text-caption">
                  Assigned: {{ subitem.assignedTo.username }} ({{ subitem.assignedTo.role }})
                </div>
                <div v-if="subitem.shareWith && subitem.shareWith.length" class="text-caption">
                  Shared:
                  {{
                    subitem.shareWith
                      .map(
                        (s) =>
                          `${s.username} (${s.role}${s.status === 'pending' ? ', Pending' : ''})`,
                      )
                      .join(', ')
                  }}
                </div>
              </div>
              <q-btn
                flat
                round
                icon="delete"
                color="negative"
                size="sm"
                @click.stop="deleteItem(subitem.id)"
                :disable="!canAddSubitems"
              />
            </div>
          </div>
        </div>
      </div>

      <!-- Right Side Box -->
      <div
        class="col-2 bg-grey-2 rounded-borders q-pa-md column-box"
        style="margin-left: 10px; width: 350px; max-height: calc(100vh - 200px); overflow-y: auto"
      >
        <!-- Shared With Section -->
        <div v-if="item" class="q-mb-md">
          <div class="text-subtitle1">Shared With:</div>
          <div class="q-pa-sm bg-grey-2 rounded-borders">
            <div
              v-if="item.shareWith && item.shareWith.length"
              class="q-py-xs q-px-sm bg-white rounded-borders q-mb-xs"
            >
              <div
                v-for="(share, index) in item.shareWith"
                :key="index"
                class="row items-center q-mb-xs"
              >
                {{ share.username }}
                <span class="text-weight-bold"
                  >({{ share.role }}{{ share.status === 'pending' ? ', Pending' : '' }})</span
                >
                <q-btn
                  v-if="canShare && share.role !== 'owner'"
                  flat
                  round
                  icon="remove"
                  color="negative"
                  size="sm"
                  @click="removeSharedUser(index)"
                />
              </div>
            </div>
            <div
              v-else
              class="q-py-xs q-px-sm bg-white rounded-borders q-mb-xs text-center text-negative"
            >
              Not shared with anyone
            </div>
          </div>
          <q-btn
            v-if="canShare"
            label="Share With"
            color="secondary"
            class="full-width"
            @click="openShareDialog"
          />
        </div>

        <!-- Assignment Section -->
        <div v-if="item" class="q-mb-md">
          <div class="text-subtitle1">Assigned To:</div>
          <div class="q-pa-sm bg-grey-2 rounded-borders">
            <div v-if="item.assignedTo" class="q-py-xs q-px-sm bg-white rounded-borders q-mb-xs">
              {{ item.assignedTo.username }}
              <span class="text-weight-bold">({{ item.assignedTo.role }})</span>
              <q-btn
                v-if="canAssign"
                flat
                round
                icon="remove"
                color="negative"
                size="sm"
                @click="removeAssignment"
              />
            </div>
            <div
              v-else
              class="q-py-xs q-px-sm bg-white rounded-borders q-mb-xs text-center text-negative"
            >
              Not assigned
            </div>
          </div>
          <q-btn
            v-if="canAssign"
            label="Assign Item"
            color="secondary"
            class="full-width"
            @click="openAssignDialog"
          />
        </div>

        <!-- Add New Report Button (Plus Icon) -->
        <q-btn
          v-if="item && !isAddingReport && !selectedReport"
          round
          color="secondary"
          icon="add"
          @click="toggleReportForm(true)"
          class="q-mb-md"
          size="sm"
          :disable="!canEdit"
        />

        <!-- Reports Box -->
        <div v-if="item && item.reports && item.reports.length" class="q-mb-md">
          <div class="text-subtitle1">Reports:</div>
          <div class="bg-grey-2 rounded-borders q-pa-sm reports-box">
            <div
              v-for="(report, index) in sortedReports"
              :key="index"
              class="q-py-xs q-px-sm bg-white rounded-borders q-mb-xs row items-center justify-between cursor-pointer"
              @click="selectReport(report, index)"
            >
              <div class="text-ellipsis single-line">
                {{ report.date }} - {{ truncateText(report.details) }}
              </div>
              <q-btn
                flat
                round
                icon="delete"
                color="negative"
                size="sm"
                @click.stop="deleteReportFromBox(report, index)"
                :disable="!canEdit"
              />
            </div>
          </div>
        </div>
        <div
          v-else-if="item && item.reports && !item.reports.length"
          class="q-mb-md text-center text-negative"
        >
          No reports available.
        </div>

        <!-- Subitem Form and Buttons -->
        <div class="bg-white" style="padding: 15px">
          <div v-if="!toggleSubitemForm" class="q-my-md flex flex-center">
            <q-circular-progress
              show-value
              :value="completionPercent"
              size="80px"
              color="green"
              track-color="grey-3"
            >
              {{ completionPercent }}%
            </q-circular-progress>
          </div>
          <div v-if="!toggleSubitemForm">
            <q-btn
              label="New Subitem"
              color="secondary"
              class="full-width q-mb-xs"
              @click="openSubitemForm"
              :disable="!canAddSubitems"
            />
            <q-btn label="Call" color="secondary" class="full-width q-mb-xs" />
          </div>
          <div v-if="toggleSubitemForm" class="bg-white q-pa-md subitem-form">
            <q-form @submit.prevent="addSubitem" style="padding: 5px 15px">
              <q-select
                v-model="subitemForm.type"
                :options="['Task', 'Project', 'Portfolio', 'Other']"
                label="Subitem Type (select or type)"
                dense
                use-input
                input-debounce="0"
                :error="!subitemForm.type && subitemFormSubmitted"
                error-message="Subitem Type is required"
                :disable="!canAddSubitems"
              />
              <q-input
                v-model="subitemForm.title"
                label="Subitem Title"
                dense
                :error="!subitemForm.title && subitemFormSubmitted"
                error-message="Title is required"
                :disable="!canAddSubitems"
              />
              <q-input
                v-model="subitemForm.deadline"
                label="Deadline"
                dense
                type="datetime-local"
                :max="item.deadline || undefined"
                :error="!subitemForm.deadline && subitemFormSubmitted"
                error-message="Deadline is required"
                :disable="!canAddSubitems"
              />
              <q-select
                v-model="subitemForm.status"
                :options="statusOptions"
                label="Status"
                dense
                :error="!subitemForm.status && subitemFormSubmitted"
                error-message="Status is required"
                :disable="!canAddSubitems"
              />
              <q-select
                v-model="subitemForm.priority"
                :options="['Low', 'Medium', 'High']"
                label="Priority"
                dense
                :error="!subitemForm.priority && subitemFormSubmitted"
                error-message="Priority is required"
                :disable="!canAddSubitems"
              />
              <div class="row q-mt-sm">
                <q-btn
                  type="submit"
                  label="Save Subitem"
                  color="secondary"
                  class="full-width q-mr-sm"
                  :disable="!canAddSubitems"
                />
                <q-btn
                  flat
                  label="Cancel"
                  color="negative"
                  class="full-width"
                  @click="cancelSubitemForm"
                />
              </div>
            </q-form>
          </div>
        </div>
      </div>
    </div>

    <!-- Share Dialog -->
    <q-dialog v-model="showShareDialog" persistent>
      <q-card style="width: 600px; max-width: 90vw">
        <q-card-section>
          <div class="text-h6">Share With</div>
        </q-card-section>
        <q-card-section>
          <q-form @submit.prevent="addSharedUser">
            <div class="row items-center q-mb-md">
              <q-input
                v-model="searchUsername"
                label="Username"
                dense
                class="col-7 q-mr-sm"
                :error="usernameError"
                error-message="Invalid or already shared username"
                @input="searchUsers"
                aria-label="Enter username to share with"
                autocomplete="off"
                debounce="300"
                :disable="!canShare"
              >
                <template v-slot:append>
                  <q-icon name="search" />
                </template>
              </q-input>
              <q-select
                v-model="selectedRole"
                :options="['owner', 'admin', 'observer']"
                label="Role"
                dense
                class="col-4"
                :disable="!canShare"
              />
            </div>
            <q-list
              bordered
              class="q-mb-md user-list"
              v-if="searchUsername && filteredUsers.length"
            >
              <q-item
                v-for="user in filteredUsers"
                :key="user.username"
                clickable
                @click="selectUser(user)"
                class="user-item"
              >
                <q-item-section>{{ user.username }}</q-item-section>
              </q-item>
            </q-list>
            <q-item v-if="isLoadingUsers" class="text-grey">
              <q-item-section>Loading users...</q-item-section>
            </q-item>
            <q-btn
              label="Add User"
              color="positive"
              type="submit"
              class="full-width q-mb-md"
              :disable="!canShare || !searchUsername || usernameError || !isValidUsername"
            />
          </q-form>
          <div v-if="newSharedUsers.length" class="q-mt-md">
            <div class="text-subtitle2">Selected Users:</div>
            <div
              v-for="(share, index) in newSharedUsers"
              :key="index"
              class="row items-center q-mb-xs"
            >
              <q-item-section
                >{{ share.username }}
                <span class="text-weight-bold">({{ share.role }})</span></q-item-section
              >
              <q-btn
                flat
                round
                icon="remove"
                color="negative"
                size="sm"
                @click="
                  newSharedUsers.splice(index, 1),
                  searchUsers()
                "
                :disable="!canShare"
              />
            </div>
          </div>
          <div v-if="item?.shareWith?.length" class="q-mt-md">
            <div class="text-subtitle2">Currently Shared With:</div>
            <div
              v-for="(share, index) in item.shareWith"
              :key="index"
              class="row items-center q-mb-xs"
            >
              <q-item-section
                >{{ share.username }}
                <span class="text-weight-bold"
                  >({{ share.role }}{{ share.status === 'pending' ? ', Pending' : '' }})</span
                ></q-item-section
              >
              <q-btn
                v-if="canShare && share.role !== 'owner'"
                flat
                round
                icon="remove"
                color="negative"
                size="sm"
                @click="removeSharedUser(index)"
              />
            </div>
          </div>
        </q-card-section>
        <q-card-actions align="right">
          <q-btn flat label="Close" color="primary" v-close-popup @click="closeShareDialog" />
          <q-btn label="Save" color="positive" @click="saveSharedUsers" :disable="!canShare" />
        </q-card-actions>
      </q-card>
    </q-dialog>

    <!-- Assign Dialog -->
    <q-dialog v-model="showAssignDialog" persistent>
      <q-card style="width: 600px; max-width: 90vw">
        <q-card-section>
          <div class="text-h6">Assign Item</div>
        </q-card-section>
        <q-card-section>
          <q-input
            v-model="searchAssignUsername"
            label="Search Username"
            dense
            @input="searchAssignUsers"
            aria-label="Search for users to assign"
            :disable="!canAssign"
          />
          <q-list v-if="filteredAssignUsers.length" bordered class="q-mt-md">
            <q-item
              v-for="user in filteredAssignUsers"
              :key="user.username"
              clickable
              @click="selectAssignee(user)"
            >
              <q-item-section
                >{{ user.username }}
                <span class="text-weight-bold">({{ user.role }})</span></q-item-section
              >
            </q-item>
          </q-list>
          <div v-else-if="searchAssignUsername" class="q-mt-md text-negative">
            No eligible users found
          </div>
          <div v-if="item?.assignedTo" class="q-mt-md">
            <div class="text-subtitle2">Currently Assigned To:</div>
            <div class="row items-center q-mb-xs">
              <q-item-section
                >{{ item.assignedTo.username }}
                <span class="text-weight-bold">({{ item.assignedTo.role }})</span></q-item-section
              >
              <q-btn
                v-if="canAssign"
                flat
                round
                icon="remove"
                color="negative"
                size="sm"
                @click="removeAssignment"
              />
            </div>
          </div>
        </q-card-section>
        <q-card-actions align="right">
          <q-btn flat label="Close" color="primary" v-close-popup @click="closeAssignDialog" />
          <q-btn label="Save" color="positive" @click="saveAssignment" :disable="!canAssign" />
        </q-card-actions>
      </q-card>
    </q-dialog>
  </q-page>
</template>

<script setup>
import { ref, computed, onMounted, watch } from 'vue'
import { useRoute, useRouter } from 'vue-router'

const route = useRoute()
const router = useRouter()
const currentDate = new Date().toLocaleDateString('en-US', { timeZone: 'Asia/Dubai' })
const item = ref(null)
const directParent = ref(null)
const sortByPriority = ref(false)
const draggedItem = ref(null)
const formSubmitted = ref(false)
const subitemFormSubmitted = ref(false)
const toggleSubitemForm = ref(false)
const subitemForm = ref({
  type: '',
  title: '',
  deadline: '',
  status: '',
  priority: '',
})
const statusOptions = ref(['Backlog', 'In Progress', 'Done'])
const categoryOptions = ref(['Development', 'Design', 'Marketing', 'Research', 'Others'])
const errorMessage = ref('')
const itemId = ref(0)
const isEditingNote = ref(false)
const originalNote = ref('')
const isAddingReport = ref(false)
const newReportDetails = ref('')
const reportFormSubmitted = ref(false)
const selectedReport = ref(null)
const selectedReportIndex = ref(null)
const isEditing = ref(false)
const showShareDialog = ref(false)
const searchUsername = ref('')
const selectedRole = ref('observer')
const usernameError = ref(false)
const filteredUsers = ref([])
const newSharedUsers = ref([])
const showAssignDialog = ref(false)
const searchAssignUsername = ref('')
const filteredAssignUsers = ref([])
const availableUsers = ref([])
const isLoadingUsers = ref(false)
const currentUser = ref(JSON.parse(localStorage.getItem('userProfile') || '{}')?.username || '')
const parentChain = ref([])

// Compute current user's role
const currentUserRole = computed(() => {
  if (!item.value) return 'N/A'
  if (item.value.creator === currentUser.value) return 'owner'
  const userShare = item.value.shareWith?.find((share) => share.username === currentUser.value)
  return userShare ? userShare.role : 'observer'
})

const isValidUsername = computed(() => {
  if (!searchUsername.value || !Array.isArray(availableUsers.value)) return false
  return availableUsers.value.some(
    (user) => user.username && user.username.toLowerCase() === searchUsername.value.toLowerCase(),
  )
})

const canEdit = computed(() => {
  if (!item.value) return false
  return (
    item.value.creator === currentUser.value ||
    item.value.shareWith?.some(
      (share) => share.username === currentUser.value && (share.role === 'admin' || share.role === 'owner')
    )
  )
})

const canAssign = computed(() => {
  if (!item.value) return false
  return item.value.creator === currentUser.value ||
    item.value.shareWith?.some(
      (share) => share.username === currentUser.value && share.role === 'owner'
    )
})

const canShare = computed(() => {
  if (!item.value) return false
  return item.value.creator === currentUser.value ||
    item.value.shareWith?.some(
      (share) => share.username === currentUser.value && share.role === 'owner'
    )
})

const canAddSubitems = computed(() => {
  if (!item.value) return false
  return item.value.creator === currentUser.value ||
    item.value.shareWith?.some(
      (share) => share.username === currentUser.value && share.role === 'owner'
    )
})

const sortedReports = computed(() => {
  return item.value?.reports
    ? [...item.value.reports].sort((a, b) => new Date(b.date) - new Date(a.date))
    : []
})

const completionPercent = computed(() => {
  if (!item.value?.subitems || item.value.subitems.length === 0) return 0
  const doneItems = item.value.subitems.filter((sub) => sub.status?.toLowerCase() === 'done').length
  return Math.round((doneItems / item.value.subitems.length) * 100)
})

watch(
  () => localStorage.getItem('kanbanUsers'),
  (newValue) => {
    const users = JSON.parse(newValue || '[]')
    availableUsers.value = Array.isArray(users) ? users : []
  },
)

const setEditingState = (id, state) => {
  localStorage.setItem(`isEditing_${id}`, JSON.stringify(state))
}

const findItemById = (items, id) => {
  for (let item of items) {
    if (item.id === id) return item
    if (item.subitems) {
      const found = findItemById(item.subitems, id)
      if (found) return found
    }
  }
  return null
}

const updateItemInUserStorage = (updatedItem, username) => {
  const userItems = JSON.parse(localStorage.getItem(`kanbanItems_${username}`) || '[]')
  const updateItem = (items, itemToUpdate) => {
    for (let i = 0; i < items.length; i++) {
      if (items[i].id === itemToUpdate.id) {
        items[i] = { ...itemToUpdate }
        return true
      }
      if (items[i].subitems && updateItem(items[i].subitems, itemToUpdate)) {
        return true
      }
    }
    return false
  }
  updateItem(userItems, updatedItem)
  localStorage.setItem(`kanbanItems_${username}`, JSON.stringify(userItems))
}

const updateSubitemsShareWith = (item, shareWith) => {
  if (item.subitems) {
    item.subitems.forEach((subitem) => {
      subitem.shareWith = [...shareWith]
      updateSubitemsShareWith(subitem, shareWith)
    })
  }
}

const buildParentChain = (items, id) => {
  const chain = []
  let currentItem = findItemById(items, id)
  while (currentItem && currentItem.parentId) {
    const parent = findItemById(items, currentItem.parentId)
    if (parent) {
      chain.unshift(parent)
      currentItem = parent
    } else {
      break
    }
  }
  return chain
}

onMounted(() => {
  loadItems()
  const users = JSON.parse(localStorage.getItem('kanbanUsers') || '[]')
  availableUsers.value = Array.isArray(users) ? users : []
})

const loadItems = () => {
  const items = JSON.parse(localStorage.getItem(`kanbanItems_${currentUser.value}`) || '[]')
  itemId.value = Number(route.params.id)
  item.value = findItemById(items, itemId.value)
  if (!item.value) {
    errorMessage.value = 'Item not found.'
    setTimeout(() => {
      router.push('/home')
    }, 3000)
    return
  }
  if (!item.value.shareWith) item.value.shareWith = [{ username: currentUser.value, role: 'owner' }]
  if (!item.value.creator) item.value.creator = currentUser.value
  if (!item.value.assignedTo) item.value.assignedTo = null
  if (item.value.parentId) {
    directParent.value = findItemById(items, item.value.parentId)
  } else {
    directParent.value = null
  }
  parentChain.value = buildParentChain(items, itemId.value)
  isEditing.value = false
  setEditingState(itemId.value, false)
  toggleSubitemForm.value = false
  isEditingNote.value = false
  isAddingReport.value = false
  selectedReport.value = null
  selectedReportIndex.value = null
  resetSubitemForm()
  if (!item.value.note) item.value.note = ''
  if (!item.value.reports) item.value.reports = []
}

watch(
  () => route.params.id,
  () => {
    loadItems()
  },
)

const openSubitemForm = () => {
  if (!canAddSubitems.value) return
  toggleSubitemForm.value = true
  errorMessage.value = ''
}

const startDrag = (item) => {
  if (canEdit.value) {
    draggedItem.value = item
  }
}

const handleDrop = (newStatus) => {
  if (!canEdit.value || !draggedItem.value) return
  if (newStatus === 'done') {
    const allSubitemsDone =
      !draggedItem.value.subitems ||
      draggedItem.value.subitems.every((sub) => sub.status === 'done')
    if (!allSubitemsDone) {
      errorMessage.value = 'Cannot move to Done: All subitems must be in Done status.'
      return
    }
    draggedItem.value.movedToDoneAt = Date.now()
  }
  draggedItem.value.status = newStatus
  saveItem()
  errorMessage.value = ''
  draggedItem.value = null
}

const deleteItem = (id) => {
  if (!canAddSubitems.value) return
  const items = JSON.parse(localStorage.getItem(`kanbanItems_${currentUser.value}`) || '[]')
  const targetItem = findItemById(items, id)
  if (!targetItem) return

  // Remove item from all shared users
  const shareUsernames = targetItem.shareWith
    .filter(share => share.username !== currentUser.value)
    .map(share => share.username)
  shareUsernames.forEach(username => {
    const userItems = JSON.parse(localStorage.getItem(`kanbanItems_${username}`) || '[]')
    const deleteRecursive = (items, itemId) => {
      for (let i = 0; i < items.length; i++) {
        if (items[i].id === itemId) {
          items.splice(i, 1)
          return true
        }
        if (items[i].subitems && deleteRecursive(items[i].subitems, itemId)) {
          return true
        }
      }
      return false
    }
    if (!targetItem.parentId) {
      // If it's a parent item, remove it entirely from user's storage
      const newUserItems = userItems.filter(i => i.id !== id)
      localStorage.setItem(`kanbanItems_${username}`, JSON.stringify(newUserItems))
    } else {
      // If it's a subitem, remove it from the parent's subitems
      for (let i = 0; i < userItems.length; i++) {
        if (deleteRecursive(userItems[i].subitems || [], id)) {
          localStorage.setItem(`kanbanItems_${username}`, JSON.stringify(userItems))
          break
        }
      }
    }

    // Remove pending invitations for the deleted item
    const invitations = JSON.parse(localStorage.getItem(`kanbanInvitations_${username}`) || '[]')
    const newInvitations = invitations.filter(inv => inv.itemId !== id)
    localStorage.setItem(`kanbanInvitations_${username}`, JSON.stringify(newInvitations))
  })

  // Remove item from current user's items
  const deleteRecursive = (items, itemId) => {
    for (let i = 0; i < items.length; i++) {
      if (items[i].id === itemId) {
        items.splice(i, 1)
        return true
      }
      if (items[i].subitems && deleteRecursive(items[i].subitems, itemId)) {
        return true
      }
    }
    return false
  }
  if (deleteRecursive(items, id)) {
    localStorage.setItem(`kanbanItems_${currentUser.value}`, JSON.stringify(items))
    if (item.value && item.value.id === id) {
      router.push('/home')
    } else {
      item.value.subitems = item.value.subitems.filter((sub) => sub.id !== id)
      saveItem()
    }
  }
}

const viewItem = (id) => {
  if (id) {
    router.push(`/itemDetail/${id}`)
  }
}

const addSubitem = () => {
  if (!canAddSubitems.value) return
  subitemFormSubmitted.value = true
  if (
    !subitemForm.value.type ||
    !subitemForm.value.title ||
    !subitemForm.value.deadline ||
    !subitemForm.value.status ||
    !subitemForm.value.priority
  ) {
    errorMessage.value = 'Please fill all required fields'
    return
  }
  if (item.value.deadline && subitemForm.value.deadline) {
    if (new Date(subitemForm.value.deadline) > new Date(item.value.deadline)) {
      errorMessage.value = 'Subitem deadline cannot be after the parent item deadline.'
      return
    }
  }
  const statusMap = {
    Backlog: 'backlog',
    'In Progress': 'in progress',
    Done: 'done',
  }
  if (item.value) {
    const newSubitem = {
      id: Date.now() + Math.floor(Math.random() * 1000),
      type: subitemForm.value.type,
      title: subitemForm.value.title,
      deadline: subitemForm.value.deadline,
      status: statusMap[subitemForm.value.status] || 'backlog',
      priority: subitemForm.value.priority,
      parentId: item.value.id,
      category: [],
      subitems: [],
      shareWith: item.value.shareWith.map((s) => ({ ...s })), // Deep copy to avoid reference issues
      movedToDoneAt: subitemForm.value.status === 'Done' ? Date.now() : null,
      note: '',
      creator: currentUser.value,
      assignedTo: null,
      reports: [],
    }
    item.value.subitems = item.value.subitems || []
    item.value.subitems.push(newSubitem)
    saveItem()
    resetSubitemForm()
    toggleSubitemForm.value = false
    errorMessage.value = ''
  }
}

const saveItem = () => {
  const items = JSON.parse(localStorage.getItem(`kanbanItems_${currentUser.value}`) || '[]')
  const updateItem = (items, itemToUpdate) => {
    for (let i = 0; i < items.length; i++) {
      if (items[i].id === itemToUpdate.id) {
        items[i] = { ...itemToUpdate }
        return true
      }
      if (items[i].subitems && updateItem(items[i].subitems, itemToUpdate)) {
        return true
      }
    }
    return false
  }
  if (item.value) {
    updateItem(items, item.value)
    localStorage.setItem(`kanbanItems_${currentUser.value}`, JSON.stringify(items))
    updateSharedItems(item.value, currentUser.value)
    loadItems()
  }
}

const updateSharedItems = (updatedItem, sourceUser) => {
  const shareUsernames = updatedItem.shareWith
    .filter(
      (share) => share.username !== sourceUser && (!share.status || share.status !== 'pending'),
    )
    .map((share) => share.username)
  shareUsernames.forEach((username) => {
    updateItemInUserStorage(updatedItem, username)
  })
}

const saveDetails = () => {
  if (!canEdit.value) return
  formSubmitted.value = true
  if (!item.value.title) {
    errorMessage.value = 'Please fill all required fields'
    return
  }
  if (directParent.value?.deadline && item.value.deadline) {
    if (new Date(item.value.deadline) > new Date(directParent.value.deadline)) {
      errorMessage.value = 'Item deadline cannot be after the direct parent item deadline.'
      return
    }
  }
  const statusMap = {
    Backlog: 'backlog',
    'In Progress': 'in progress',
    Done: 'done',
  }
  const newStatus = statusMap[item.value.status] || item.value.status.toLowerCase()
  if (newStatus === 'done') {
    const allSubitemsDone =
      !item.value.subitems || item.value.subitems.every((sub) => sub.status === 'done')
    if (!allSubitemsDone) {
      errorMessage.value = 'Cannot set to Done: All subitems must be in Done status.'
      return
    }
    item.value.movedToDoneAt = Date.now()
  }
  item.value.status = newStatus
  saveItem()
  toggleEdit(false)
  errorMessage.value = ''
}

const toggleEdit = (value) => {
  if (!canEdit.value) return
  isEditing.value = value
  setEditingState(itemId.value, value)
  if (!value) {
    formSubmitted.value = true
  }
}

const cancelSubitemForm = () => {
  resetSubitemForm()
  toggleSubitemForm.value = false
  errorMessage.value = ''
}

const resetSubitemForm = () => {
  subitemForm.value = {
    type: '',
    title: '',
    deadline: '',
    status: '',
    priority: '',
  }
  subitemFormSubmitted.value = false
}

const toggleNoteEdit = (value) => {
  if (!canEdit.value) return
  if (value) {
    originalNote.value = item.value.note
  }
  isEditingNote.value = value
  if (!value && !item.value.note) {
    item.value.note = ''
  }
}

const cancelNoteEdit = () => {
  item.value.note = originalNote.value
  isEditingNote.value = false
  errorMessage.value = ''
}

const saveNote = () => {
  if (!canEdit.value) return
  if (item.value.note && item.value.note.trim()) {
    saveItem()
    isEditingNote.value = false
    errorMessage.value = ''
  } else {
    errorMessage.value = 'Note cannot be empty.'
  }
}

const deleteNote = () => {
  if (!canEdit.value) return
  item.value.note = ''
  saveItem()
  errorMessage.value = ''
}

const toggleReportForm = (value) => {
  if (!canEdit.value && value) return
  if (value) {
    newReportDetails.value = ''
    reportFormSubmitted.value = false
  }
  isAddingReport.value = value
  if (value) {
    selectedReport.value = null
    selectedReportIndex.value = null
  }
}

const cancelReport = () => {
  isAddingReport.value = false
  errorMessage.value = ''
}

const saveReport = () => {
  if (!canEdit.value) return
  reportFormSubmitted.value = true
  if (!newReportDetails.value || !newReportDetails.value.trim()) {
    errorMessage.value = 'Report details cannot be empty.'
    return
  }
  const currentDateTime = new Date().toLocaleString('en-US', { timeZone: 'Asia/Dubai' })
  const newReport = {
    date: currentDateTime,
    details: newReportDetails.value,
  }
  item.value.reports = item.value.reports || []
  item.value.reports.unshift(newReport)
  saveItem()
  isAddingReport.value = false
  newReportDetails.value = ''
  errorMessage.value = ''
}

const selectReport = (report, index) => {
  selectedReport.value = { ...report }
  selectedReportIndex.value = index
  isAddingReport.value = false
}

const cancelEditReport = () => {
  selectedReport.value = null
  selectedReportIndex.value = null
  errorMessage.value = ''
}

const saveEditedReport = () => {
  if (!canEdit.value) return
  if (
    !selectedReport.value ||
    !selectedReport.value.details ||
    !selectedReport.value.details.trim()
  ) {
    errorMessage.value = 'Report details cannot be empty.'
    return
  }
  if (
    selectedReportIndex.value !== null &&
    item.value.reports &&
    item.value.reports.length > selectedReportIndex.value
  ) {
    item.value.reports[selectedReportIndex.value] = {
      ...selectedReport.value,
      date: item.value.reports[selectedReportIndex.value].date,
    }
    saveItem()
  }
  selectedReport.value = null
  selectedReportIndex.value = null
  errorMessage.value = ''
}

const deleteReportFromBox = (report, index) => {
  if (!canEdit.value) return
  if (item.value.reports && item.value.reports.length > index) {
    item.value.reports.splice(index, 1)
    saveItem()
  }
  errorMessage.value = ''
}

const truncateText = (text) => {
  if (!text) return ''
  return text.length > 30 ? text.substring(0, 30) + '...' : text
}

const openShareDialog = () => {
  if (!canShare.value) return
  showShareDialog.value = true
  searchUsername.value = ''
  selectedRole.value = 'observer'
  usernameError.value = false
  filteredUsers.value = []
  newSharedUsers.value = []
  isLoadingUsers.value = true
  const users = JSON.parse(localStorage.getItem('kanbanUsers') || '[]')
  availableUsers.value = Array.isArray(users) ? users : []
  isLoadingUsers.value = false
}

const closeShareDialog = () => {
  showShareDialog.value = false
  searchUsername.value = ''
  selectedRole.value = 'observer'
  usernameError.value = false
  filteredUsers.value = []
  newSharedUsers.value = []
  isLoadingUsers.value = false
}

const searchUsers = () => {
  if (!Array.isArray(availableUsers.value)) {
    filteredUsers.value = []
    usernameError.value = true
    return
  }
  if (!searchUsername.value) {
    filteredUsers.value = []
    usernameError.value = false
    return
  }
  filteredUsers.value = availableUsers.value.filter(
    (user) =>
      user.username &&
      user.username.toLowerCase().includes(searchUsername.value.toLowerCase()) &&
      user.username !== currentUser.value &&
      !item.value.shareWith.some((share) => share.username === user.username) &&
      !newSharedUsers.value.some((share) => share.username === user.username),
  )
  usernameError.value = !isValidUsername.value && !!searchUsername.value
}

const selectUser = (user) => {
  newSharedUsers.value.push({ username: user.username, role: selectedRole.value })
  searchUsername.value = ''
  filteredUsers.value = []
  usernameError.value = false
}

const addSharedUser = () => {
  if (!canShare.value || !searchUsername.value || usernameError.value || !isValidUsername.value)
    return
  const userExists =
    item.value.shareWith.some((share) => share.username === searchUsername.value) ||
    newSharedUsers.value.some((share) => share.username === searchUsername.value)
  if (userExists) {
    errorMessage.value = 'This user is already shared with this item.'
    return
  }
  newSharedUsers.value.push({ username: searchUsername.value, role: selectedRole.value })
  searchUsername.value = ''
  filteredUsers.value = []
  usernameError.value = false
}

const removeSharedUser = (index) => {
  if (!canShare.value) return
  if (index < item.value.shareWith.length && item.value.shareWith[index].role !== 'owner') {
    const removedUser = item.value.shareWith[index]
    const isPending = removedUser.status === 'pending'
    const removedUsername = removedUser.username
    item.value.shareWith.splice(index, 1)
    updateSubitemsShareWith(item.value, item.value.shareWith)
    saveItem()

    // Handle item and invitation removal based on whether it's a parent item
    const userItems = JSON.parse(localStorage.getItem(`kanbanItems_${removedUsername}`) || '[]')
    const isParentItem = !item.value.parentId
    const deleteRecursive = (items, itemId) => {
      for (let i = 0; i < items.length; i++) {
        if (items[i].id === itemId) {
          items.splice(i, 1)
          return true
        }
        if (items[i].subitems && deleteRecursive(items[i].subitems, itemId)) {
          return true
        }
      }
      return false
    }
    if (isParentItem) {
      // If it's a parent item, remove it entirely from user's storage
      const newUserItems = userItems.filter(i => i.id !== item.value.id)
      localStorage.setItem(`kanbanItems_${removedUsername}`, JSON.stringify(newUserItems))
      // Remove pending invitations for parent item
      const invitations = JSON.parse(localStorage.getItem(`kanbanInvitations_${removedUsername}`) || '[]')
      const newInvitations = invitations.filter(inv => inv.itemId !== item.value.id)
      localStorage.setItem(`kanbanInvitations_${removedUsername}`, JSON.stringify(newInvitations))
    } else if (!isPending) {
      // If it's a subitem and not pending, remove it from the parent's subitems
      for (let i = 0; i < userItems.length; i++) {
        if (deleteRecursive(userItems[i].subitems || [], item.value.id)) {
          localStorage.setItem(`kanbanItems_${removedUsername}`, JSON.stringify(userItems))
          break
        }
      }
    }
    // If it's a subitem and pending, leave the invitation intact
  } else if (index >= item.value.shareWith.length) {
    newSharedUsers.value.splice(index - item.value.shareWith.length, 1)
  }
  searchUsers()
}

const saveSharedUsers = () => {
  if (!canShare.value) return
  newSharedUsers.value.forEach((share) => {
    item.value.shareWith.push({ username: share.username, role: share.role, status: 'pending' })
    const invitations = JSON.parse(
      localStorage.getItem(`kanbanInvitations_${share.username}`) || '[]',
    )
    invitations.push({
      itemId: item.value.id,
      username: share.username,
      role: share.role,
      status: 'pending',
      invitedAt: Date.now(),
      invitedBy: currentUser.value,
    })
    localStorage.setItem(`kanbanInvitations_${share.username}`, JSON.stringify(invitations))
  })
  updateSubitemsShareWith(item.value, item.value.shareWith)
  saveItem()
  closeShareDialog()
}

const openAssignDialog = () => {
  if (!canAssign.value) return
  showAssignDialog.value = true
  searchAssignUsername.value = ''
  filteredAssignUsers.value = []
}

const closeAssignDialog = () => {
  showAssignDialog.value = false
  searchAssignUsername.value = ''
  filteredAssignUsers.value = []
}

const searchAssignUsers = () => {
  if (!Array.isArray(availableUsers.value)) {
    filteredAssignUsers.value = []
    return
  }
  if (!searchAssignUsername.value) {
    filteredAssignUsers.value = item.value.shareWith
      .filter(
        (share) =>
          share.username !== currentUser.value && (!share.status || share.status !== 'pending'),
      )
      .map((share) => ({ username: share.username, role: share.role }))
    return
  }
  filteredAssignUsers.value = item.value.shareWith
    .filter(
      (share) =>
        share.username !== currentUser.value &&
        (!share.status || share.status !== 'pending') &&
        share.username.toLowerCase().includes(searchAssignUsername.value.toLowerCase()),
    )
    .map((share) => ({ username: share.username, role: share.role }))
}

const selectAssignee = (user) => {
  if (!canAssign.value) return
  item.value.assignedTo = { username: user.username, role: user.role }
  saveItem()
  closeAssignDialog()
}

const removeAssignment = () => {
  if (!canAssign.value) return
  item.value.assignedTo = null
  saveItem()
}

const openProfile = () => {
  router.push('/profile')
}

const logout = () => {
  localStorage.removeItem('authToken')
  localStorage.removeItem('userProfile')
  router.push('/login')
}

const sortedSubitems = (status) => {
  if (!item.value?.subitems) return []
  const statusMap = {
    Backlog: 'backlog',
    'In Progress': 'in progress',
    Done: 'done',
  }
  const normalizedStatus = statusMap[status] || status.toLowerCase()
  const filtered = item.value.subitems.filter(
    (sub) => sub.status?.toLowerCase() === normalizedStatus,
  )
  if (status === 'done') {
    return filtered.sort((a, b) => (a.movedToDoneAt || 0) - (b.movedToDoneAt || 0))
  }
  if (sortByPriority.value) {
    return filtered.sort((a, b) => {
      const priorityMap = { High: 3, Medium: 2, Low: 1, '': 0 }
      return (priorityMap[b.priority] || 0) - (priorityMap[a.priority] || 0)
    })
  }
  return filtered.sort((a, b) => new Date(a.deadline) - new Date(b.deadline))
}

const sortSubitems = () => {
  if (!canEdit.value) return
  item.value.subitems = [
    ...sortedSubitems('backlog'),
    ...sortedSubitems('in progress'),
    ...sortedSubitems('done'),
  ]
  saveItem()
}
</script>

<style scoped>
.divider-col {
  border-left: 1px solid #ccc;
  padding-left: 8px;
}
.equal-height-row {
  display: flex;
  flex-wrap: nowrap;
  align-items: stretch;
}
.column-box {
  height: calc(100vh - 200px);
  display: flex;
  flex-direction: column;
}
.resizable-note {
  width: 100%;
  min-height: 100px;
  max-height: 300px;
  resize: vertical;
  overflow-y: auto;
  border: 1px solid #ccc;
  padding: 8px;
}
.custom-textarea {
  width: 100%;
  min-height: 100px;
  max-height: 300px;
  resize: vertical;
  border: 1px solid #ccc;
  padding: 8px;
  font-family: inherit;
}
.reports-box {
  max-height: 200px;
  overflow-y: auto;
}
.text-ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.single-line {
  display: inline-block;
  max-width: 80%;
}
.subitem-form {
  padding: 10px;
  border-radius: 4px;
}
.user-list {
  max-height: 200px;
  overflow-y: auto;
}
.user-item:hover {
  background-color: #f0f0f0;
}
</style>


کد فعلی home:
<template>
  <q-page class="q-pa-md">
    <!-- Top bar -->
    <div class="row justify-between items-center q-mb-md">
      <div class="text-h6">Date: {{ currentDate }}</div>
      <div class="q-gutter-sm">
        <q-btn
          round
          color="primary"
          icon="account_circle"
          @click="openProfile"
          aria-label="Go to profile"
        />
        <q-btn round flat color="negative" icon="logout" @click="logout" aria-label="Log out" />
      </div>
    </div>
    <q-toggle
      v-model="sortByPriority"
      label="Sort by"
      left-label
      checked-icon="sort"
      unchecked-icon="event"
      color="primary"
    />

    <!-- Error Banner -->
    <q-banner
      v-if="errorMessage"
      dense
      class="bg-negative text-white q-mb-md"
      aria-live="polite"
      role="alert"
    >
      {{ errorMessage }}
    </q-banner>

    <!-- Messages Banner -->
    <q-banner
      v-if="messages.length"
      dense
      class="bg-blue-9 text-white q-mb-md"
      style="width: 50%;"
      aria-live="polite"
      role="alert"
    >
      <div>Messages ({{ messages.length }})</div>
      <q-list dense>
        <q-item
          v-for="(message, index) in messages"
          :key="index"
          class="q-py-xs"
        >
          <q-item-section>{{ message.text }}</q-item-section>
          <q-item-section side>
            <q-btn
              flat
              round
              icon="delete"
              color="white"
              size="sm"
              @click="deleteMessage(index)"
              aria-label="Delete message"
            />
          </q-item-section>
        </q-item>
      </q-list>
    </q-banner>

    <!-- Main layout -->
    <div class="row" style="height: calc(100vh - 120px)">
      <!-- Main content area -->
      <div
        class="col bg-grey-2 rounded-borders q-pa-md overflow-y-auto"
        style="margin-right: 280px; margin-bottom: 10px; width: calc(100% - 280px)"
      >
        <div class="row" style="min-height: 100%; flex-wrap: nowrap">
          <!-- Backlog Column -->
          <div class="col-4" @dragover.prevent @drop="handleDrop('backlog')">
            <div class="text-center text-subtitle2 q-mb-sm">Backlog</div>
            <div
              v-for="item in sortedItems('backlog')"
              :key="item.id"
              class="q-mb-sm bg-white q-pa-sm shadow-1 row justify-between items-center"
              :draggable="canEdit(item)"
              @dragstart="startDrag(item)"
              @click="viewItem(item.id)"
            >
              <div>
                <strong>{{ item.type }}</strong
                >: {{ item.title }} (Due: {{ item.deadline || 'N/A' }})
              </div>
              <q-btn
                flat
                round
                icon="delete"
                color="negative"
                size="sm"
                @click.stop="deleteItem(item.id)"
                :disable="!canEdit(item)"
              />
            </div>
          </div>

          <!-- In Progress Column -->
          <div class="col-4 divider-col" @dragover.prevent @drop="handleDrop('in progress')">
            <div class="text-center text-subtitle2 q-mb-sm">In Progress</div>
            <div
              v-for="item in sortedItems('In Progress')"
              :key="item.id"
              class="q-mb-sm bg-white q-pa-sm shadow-1 row justify-between items-center"
              :draggable="canEdit(item)"
              @dragstart="startDrag(item)"
              @click="viewItem(item.id)"
            >
              <div>
                <strong>{{ item.type }}</strong
                >: {{ item.title }} (Due: {{ item.deadline || 'N/A' }})
              </div>
              <q-btn
                flat
                round
                icon="delete"
                color="negative"
                size="sm"
                @click.stop="deleteItem(item.id)"
                :disable="!canEdit(item)"
              />
            </div>
          </div>

          <!-- Done Column -->
          <div class="col-4 divider-col" @dragover.prevent @drop="handleDrop('done')">
            <div class="text-center text-subtitle2 q-mb-sm">Done</div>
            <div
              v-for="item in sortedItems('done')"
              :key="item.id"
              class="q-mb-sm bg-white q-pa-sm shadow-1 row justify-between items-center"
              :draggable="canEdit(item)"
              @dragstart="startDrag(item)"
              @click="viewItem(item.id)"
            >
              <div>
                <strong>{{ item.type }}</strong
                >: {{ item.title }} (Due: {{ item.deadline || 'N/A' }})
              </div>
              <q-btn
                flat
                round
                icon="delete"
                color="negative"
                size="sm"
                @click.stop="deleteItem(item.id)"
                :disable="!canEdit(item)"
              />
            </div>
          </div>
        </div>
      </div>

      <!-- Right-side Form Panel -->
      <div
        class="fixed-top-right"
        style="
          width: 260px;
          top: 60px;
          right: 10px;
          bottom: 10px;
          overflow-y: auto;
          padding: 10px 0px;
        "
      >
        <q-btn
          label="Add Item"
          icon="add"
          color="secondary"
          class="full-width q-mb-md"
          @click="toggleForm = !toggleForm"
        />

        <!-- Invitations Banner -->
        <q-banner
          dense
          class="bg-yellow-9 text-white q-mb-md"
          aria-live="polite"
          role="alert"
        >
          <template v-if="pendingInvitations.length">
            Invitations ({{ pendingInvitations.length }})
            <q-btn
              flat
              label="View"
              color="white"
              @click="showInvitationsDialog = true"
              aria-label="View pending invitations"
            />
          </template>
          <template v-else>
            Invitations
          </template>
        </q-banner>

        <!-- Progress Chart -->
        <div class="q-my-md flex flex-center">
          <q-circular-progress
            show-value
            :value="completionPercent"
            size="80px"
            color="green"
            track-color="grey-3"
          >
            {{ completionPercent }}%
          </q-circular-progress>
        </div>

        <!-- Item Form -->
        <div v-if="toggleForm" class="bg-white">
          <q-form @submit.prevent="addItem" style="padding: 5px 15px">
            <q-select
              v-model="itemForm.type"
              :options="['Task', 'Project', 'Portfolio', 'Other']"
              label="Item Type (select or type)"
              dense
              use-input
              input-debounce="0"
              :error="!itemForm.type && formSubmitted"
              error-message="Item Type is required"
            />
            <q-input
              v-model="itemForm.title"
              label="Item Title"
              dense
              :error="!itemForm.title && formSubmitted"
              error-message="Title is required"
            />
            <q-input
              v-model="itemForm.deadline"
              label="Deadline"
              dense
              type="datetime-local"
              :error="!itemForm.deadline && formSubmitted"
              error-message="Deadline is required"
            />
            <q-select
              v-model="itemForm.status"
              :options="statusOptions"
              label="Status"
              dense
              :error="!itemForm.status && formSubmitted"
              error-message="Status is required"
            />
            <q-select
              v-model="itemForm.priority"
              :options="['Low', 'Medium', 'High']"
              label="Priority"
              dense
              :error="!itemForm.priority && formSubmitted"
              error-message="Priority is required"
            />
            <q-select
              v-model="itemForm.category"
              :options="categoryOptions"
              use-input
              use-chips
              label="Category"
              multiple
              dense
            />
            <div class="q-mt-sm">
              <div class="text-subtitle2">Subitems</div>
              <div
                v-for="(subitem, index) in itemForm.subitems"
                :key="index"
                class="row items-center q-mb-xs"
              >
                <q-select
                  v-model="itemForm.subitems[index].type"
                  :options="['Task', 'Project', 'Portfolio', 'Other']"
                  label="Subitem Type"
                  dense
                  use-input
                  input-debounce="0"
                  :error="!itemForm.subitems[index].type && formSubmitted"
                  error-message="Subitem Type is required"
                />
                <q-input
                  v-model="itemForm.subitems[index].title"
                  label="Subitem Title"
                  dense
                  class="q-ml-sm"
                  :error="!itemForm.subitems[index].title && formSubmitted"
                  error-message="Subitem Title is required"
                />
                <q-input
                  v-model="itemForm.subitems[index].deadline"
                  label="Deadline"
                  dense
                  type="datetime-local"
                  :max="itemForm.deadline || undefined"
                  :error="!itemForm.subitems[index].deadline && formSubmitted"
                  error-message="Deadline is required"
                  class="q-ml-sm"
                />
                <q-select
                  v-model="itemForm.subitems[index].status"
                  :options="statusOptions"
                  label="Status"
                  dense
                  class="q-ml-sm"
                  :error="!itemForm.subitems[index].status && formSubmitted"
                  error-message="Status is required"
                />
                <q-select
                  v-model="itemForm.subitems[index].priority"
                  :options="['Low', 'Medium', 'High']"
                  label="Priority"
                  dense
                  class="q-ml-sm"
                  :error="!itemForm.subitems[index].priority && formSubmitted"
                  error-message="Priority is required"
                />
                <q-btn
                  flat
                  round
                  icon="remove"
                  color="negative"
                  size="sm"
                  @click="itemForm.subitems.splice(index, 1)"
                />
              </div>
              <q-btn
                flat
                icon="add"
                size="sm"
                color="secondary"
                @click="
                  itemForm.subitems.push({
                    type: '',
                    title: '',
                    deadline: '',
                    status: 'backlog',
                    priority: 'Low',
                  })
                "
              />
            </div>
            <div class="q-mt-sm">
              <div class="text-subtitle2">Share With</div>
              <div
                v-for="(share, index) in itemForm.shareWith"
                :key="index"
                class="row items-center q-mb-xs"
              >
                <q-input v-model="share.username" label="Username" dense class="col q-mr-sm" />
                <q-select
                  v-model="share.role"
                  :options="['owner', 'admin', 'observer']"
                  label="Role"
                  dense
                  class="col"
                />
                <q-btn
                  flat
                  round
                  icon="remove"
                  color="negative"
                  size="sm"
                  @click="itemForm.shareWith.splice(index, 1)"
                />
              </div>
              <q-btn
                flat
                icon="add"
                size="sm"
                color="secondary"
                @click="itemForm.shareWith.push({ username: '', role: 'observer' })"
              />
            </div>
            <q-btn type="submit" label="Save Item" color="secondary" class="q-mt-sm full-width" />
          </q-form>
        </div>
      </div>
    </div>

    <!-- Invitations Dialog -->
    <q-dialog v-model="showInvitationsDialog" persistent>
      <q-card style="width: 600px; max-width: 90vw;">
        <q-card-section>
          <div class="text-h6">Pending Invitations</div>
        </q-card-section>
        <q-card-section>
          <q-list v-if="pendingInvitations.length" bordered>
            <q-item
              v-for="invitation in pendingInvitations"
              :key="invitation.itemId + '-' + invitation.username"
            >
              <q-item-section>
                <q-item-label>
                  Invited to: {{ getItemTitle(invitation.itemId) }} (Role: {{ invitation.role }})
                </q-item-label>
                <q-item-label caption>
                  Invited at: {{ new Date(invitation.invitedAt).toLocaleString('en-US', { timeZone: 'Asia/Dubai' }) }}
                </q-item-label>
              </q-item-section>
              <q-item-section side>
                <q-btn
                  flat
                  color="positive"
                  label="Accept"
                  @click="acceptInvitation(invitation)"
                />
                <q-btn
                  flat
                  color="negative"
                  label="Reject"
                  @click="rejectInvitation(invitation)"
                />
              </q-item-section>
            </q-item>
          </q-list>
          <div v-else class="text-negative">No pending invitations</div>
        </q-card-section>
        <q-card-actions align="right">
          <q-btn flat label="Close" color="primary" v-close-popup />
        </q-card-actions>
      </q-card>
    </q-dialog>
  </q-page>
</template>

<script setup>
import { ref, computed, onMounted, watch, nextTick } from 'vue'
import { useRouter } from 'vue-router'

const router = useRouter()
const currentDate = new Date().toLocaleDateString('en-US', { timeZone: 'Asia/Dubai' })
const items = ref([])
const sortByPriority = ref(false)
const toggleForm = ref(false)
const formSubmitted = ref(false)
const errorMessage = ref('')
const pendingInvitations = ref([])
const showInvitationsDialog = ref(false)
const messages = ref([])

const categoryOptions = ref(['Development', 'Design', 'Marketing', 'Research', 'Others'])
const statusOptions = ref(['Backlog', 'In Progress', 'Done'])

const itemForm = ref({
  type: '',
  title: '',
  deadline: '',
  category: [],
  subitems: [],
  shareWith: [],
  priority: '',
  status: '',
})

const currentUser = ref(JSON.parse(localStorage.getItem('userProfile') || '{}')?.username || '')

onMounted(() => {
  const token = localStorage.getItem('authToken')
  if (!token) {
    console.log('User not authenticated, redirecting to login')
    router.push('/login')
  }
  loadItems()
  loadInvitations()
  loadMessages()
})

const loadItems = () => {
  const savedItems = localStorage.getItem(`kanbanItems_${currentUser.value}`)
  if (savedItems) {
    items.value = JSON.parse(savedItems)
  }
}

const loadInvitations = () => {
  const invitations = JSON.parse(localStorage.getItem(`kanbanInvitations_${currentUser.value}`) || '[]')
  pendingInvitations.value = invitations.filter(
    inv => inv.username === currentUser.value && inv.status === 'pending'
  )
}

const loadMessages = () => {
  const savedMessages = JSON.parse(localStorage.getItem(`kanbanMessages_${currentUser.value}`) || '[]')
  messages.value = savedMessages
}

const saveItems = () => {
  localStorage.setItem(`kanbanItems_${currentUser.value}`, JSON.stringify(items.value))
}

const saveInvitations = (invitations, username) => {
  localStorage.setItem(`kanbanInvitations_${username}`, JSON.stringify(invitations))
}

const saveMessages = () => {
  localStorage.setItem(`kanbanMessages_${currentUser.value}`, JSON.stringify(messages.value))
}

const canEdit = (item) => {
  return (
    item.creator === currentUser.value ||
    item.shareWith?.some(
      (share) => share.username === currentUser.value && (share.role === 'admin' || share.role === 'owner')
    )
  )
}

const acceptInvitation = (invitation) => {
  const invitations = JSON.parse(localStorage.getItem(`kanbanInvitations_${currentUser.value}`) || '[]')
  const index = invitations.findIndex(
    inv => inv.itemId === invitation.itemId && inv.username === invitation.username
  )
  if (index !== -1) {
    invitations[index].status = 'accepted'
    saveInvitations(invitations, currentUser.value)

    const creatorItems = JSON.parse(localStorage.getItem(`kanbanItems_${invitation.invitedBy}`) || '[]')
    const sharedItem = findItemById(creatorItems, invitation.itemId)
    if (sharedItem) {
      // Update shareWith in creator's item to remove pending status
      const creatorShareIndex = sharedItem.shareWith.findIndex(s => s.username === currentUser.value)
      if (creatorShareIndex !== -1) {
        sharedItem.shareWith[creatorShareIndex] = {
          username: currentUser.value,
          role: invitation.role
        }
        updateItemInUserStorage(sharedItem, invitation.invitedBy)
        // Propagate to subitems
        updateSubitemsShareWith(sharedItem, sharedItem.shareWith)
      }

      // Add item to user's items
      const userItems = JSON.parse(localStorage.getItem(`kanbanItems_${currentUser.value}`) || '[]')
      const itemCopy = JSON.parse(JSON.stringify(sharedItem))
      itemCopy.shareWith = itemCopy.shareWith.map(s => ({
        username: s.username,
        role: s.role
      }))
      userItems.push(itemCopy)
      localStorage.setItem(`kanbanItems_${currentUser.value}`, JSON.stringify(userItems))
      items.value = userItems

      // Update other shared users
      updateSharedItems(sharedItem, invitation.invitedBy)
    }
    loadInvitations()
  }
}

const rejectInvitation = (invitation) => {
  const invitations = JSON.parse(localStorage.getItem(`kanbanInvitations_${currentUser.value}`) || '[]')
  const index = invitations.findIndex(
    inv => inv.itemId === invitation.itemId && inv.username === invitation.username
  )
  if (index !== -1) {
    invitations.splice(index, 1)
    saveInvitations(invitations, currentUser.value)

    // Remove from creator's shareWith
    const creatorItems = JSON.parse(localStorage.getItem(`kanbanItems_${invitation.invitedBy}`) || '[]')
    const sharedItem = findItemById(creatorItems, invitation.itemId)
    if (sharedItem) {
      sharedItem.shareWith = sharedItem.shareWith.filter(s => s.username !== currentUser.value)
      updateSubitemsShareWith(sharedItem, sharedItem.shareWith)
      updateItemInUserStorage(sharedItem, invitation.invitedBy)
      updateSharedItems(sharedItem, invitation.invitedBy)
    }

    // Add rejection message for the inviter
    const inviterMessages = JSON.parse(localStorage.getItem(`kanbanMessages_${invitation.invitedBy}`) || '[]')
    const itemName = sharedItem ? `${sharedItem.type}: ${sharedItem.title}` : 'Unknown Item'
    inviterMessages.push({
      text: `${currentUser.value} rejected invite for ${itemName}`,
      timestamp: Date.now()
    })
    localStorage.setItem(`kanbanMessages_${invitation.invitedBy}`, JSON.stringify(inviterMessages))
    loadInvitations()
  }
}

const deleteMessage = (index) => {
  messages.value.splice(index, 1)
  saveMessages()
}

const findItemById = (items, id) => {
  for (let item of items) {
    if (item.id === id) return item
    if (item.subitems) {
      const found = findItemById(item.subitems, id)
      if (found) return found
    }
  }
  return null
}

const updateItemInUserStorage = (updatedItem, username) => {
  const userItems = JSON.parse(localStorage.getItem(`kanbanItems_${username}`) || '[]')
  const updateItem = (items, itemToUpdate) => {
    for (let i = 0; i < items.length; i++) {
      if (items[i].id === itemToUpdate.id) {
        items[i] = { ...itemToUpdate }
        return true
      }
      if (items[i].subitems && updateItem(items[i].subitems, itemToUpdate)) {
        return true
      }
    }
    return false
  }
  updateItem(userItems, updatedItem)
  localStorage.setItem(`kanbanItems_${username}`, JSON.stringify(userItems))
}

const updateSubitemsShareWith = (item, shareWith) => {
  if (item.subitems) {
    item.subitems.forEach(subitem => {
      subitem.shareWith = [...shareWith]
      updateSubitemsShareWith(subitem, shareWith)
    })
  }
}

const getItemTitle = (itemId) => {
  const item = findItemById(items.value, itemId)
  return item ? `${item.type}: ${item.title}` : 'Unknown Item'
}

const logout = () => {
  localStorage.removeItem('authToken')
  localStorage.removeItem('userProfile')
  router.push('/login')
  console.log('User logged out')
}

const addItem = () => {
  formSubmitted.value = true
  if (
    !itemForm.value.type ||
    !itemForm.value.title ||
    !itemForm.value.deadline ||
    !itemForm.value.status ||
    !itemForm.value.priority
  ) {
    errorMessage.value = 'Please fill all required fields'
    return
  }

  const hasInvalidSubitemDeadline = itemForm.value.subitems.some(subitem => {
    if (subitem.deadline && itemForm.value.deadline) {
      return new Date(subitem.deadline) > new Date(itemForm.value.deadline)
    }
    return false
  })
  if (hasInvalidSubitemDeadline) {
    errorMessage.value = 'Subitem deadline cannot be after the parent item deadline.'
    return
  }

  const statusMap = {
    Backlog: 'backlog',
    'In Progress': 'in progress',
    Done: 'done',
  }
  const parentId = Date.now()
  const newItem = {
    id: parentId,
    type: itemForm.value.type,
    title: itemForm.value.title,
    deadline: itemForm.value.deadline,
    status: statusMap[itemForm.value.status] || 'in progress',
    priority: itemForm.value.priority,
    category: itemForm.value.category,
    subitems: itemForm.value.subitems.map((subitem, index) => ({
      id: parentId + index + 1,
      type: subitem.type,
      title: subitem.title,
      deadline: subitem.deadline,
      status: subitem.status || 'backlog',
      priority: subitem.priority || 'Low',
      parentId: parentId,
      category: [],
      shareWith: [{ username: currentUser.value, role: 'owner' }, ...itemForm.value.shareWith],
      movedToDoneAt: null,
      creator: currentUser.value,
      assignedTo: null,
      note: '',
      reports: []
    })),
    shareWith: [{ username: currentUser.value, role: 'owner' }, ...itemForm.value.shareWith],
    movedToDoneAt: itemForm.value.status === 'Done' ? Date.now() : null,
    creator: currentUser.value,
    assignedTo: null,
    note: '',
    reports: []
  }
  items.value.push(newItem)

  const shareUsernames = itemForm.value.shareWith
    .filter(share => share.username && share.username !== currentUser.value)
    .map(share => share.username)
  shareUsernames.forEach(username => {
    const invitations = JSON.parse(localStorage.getItem(`kanbanInvitations_${username}`) || '[]')
    const share = itemForm.value.shareWith.find(s => s.username === username)
    if (share) {
      invitations.push({
        itemId: parentId,
        username: username,
        role: share.role,
        status: 'pending',
        invitedAt: Date.now(),
        invitedBy: currentUser.value,
      })
      saveInvitations(invitations, username)
    }
  })

  resetForm(itemForm)
  toggleForm.value = false
  formSubmitted.value = false
  saveItems()
  errorMessage.value = ''
}

const viewItem = (id) => {
  router.push(`/itemDetail/${id}`)
}

function resetForm(form) {
  Object.keys(form.value).forEach(
    (key) => (form.value[key] = Array.isArray(form.value[key]) ? [] : ''),
  )
  form.value.shareWith = []
}

const deleteItem = (id) => {
  const item = findItemById(items.value, id)
  if (!canEdit(item)) {
    errorMessage.value = 'Only the owner or admin can delete this item.'
    return
  }

  // Remove item from all shared users
  const shareUsernames = item.shareWith
    .filter(share => share.username !== currentUser.value)
    .map(share => share.username)
  shareUsernames.forEach(username => {
    const userItems = JSON.parse(localStorage.getItem(`kanbanItems_${username}`) || '[]')
    const newUserItems = userItems.filter(i => i.id !== id)
    localStorage.setItem(`kanbanItems_${username}`, JSON.stringify(newUserItems))

    // Remove invitations
    const invitations = JSON.parse(localStorage.getItem(`kanbanInvitations_${username}`) || '[]')
    const newInvitations = invitations.filter(inv => inv.itemId !== id)
    localStorage.setItem(`kanbanInvitations_${username}`, JSON.stringify(newInvitations))
  })

  // Remove item from current user's items
  items.value = items.value.filter(i => i.id !== id)
  saveItems()
}

function openProfile() {
  router.push('/profile')
  console.log('Navigating to profile')
}

const draggedItem = ref(null)
const startDrag = (item) => {
  if (canEdit(item)) {
    draggedItem.value = item
  }
}

const handleDrop = (newStatus) => {
  if (!draggedItem.value || !canEdit(draggedItem.value)) return
  if (newStatus === 'done') {
    const allSubitemsDone =
      !draggedItem.value.subitems ||
      draggedItem.value.subitems.every((sub) => sub.status === 'done')
    if (!allSubitemsDone) {
      errorMessage.value = 'Cannot move to Done: All subitems must be in Done status.'
      return
    }
    draggedItem.value.movedToDoneAt = Date.now()
  }
  draggedItem.value.status = newStatus
  updateSharedItems(draggedItem.value, currentUser.value)
  items.value = [...items.value]
  saveItems()
  errorMessage.value = ''
  draggedItem.value = null
}

const updateSharedItems = (updatedItem, sourceUser) => {
  const shareUsernames = updatedItem.shareWith
    .filter(share => share.username !== sourceUser && (!share.status || share.status !== 'pending'))
    .map(share => share.username)
  shareUsernames.forEach(username => {
    const userItems = JSON.parse(localStorage.getItem(`kanbanItems_${username}`) || '[]')
    const targetItem = findItemById(userItems, updatedItem.id)
    if (targetItem) {
      Object.assign(targetItem, JSON.parse(JSON.stringify(updatedItem)))
      updateSubitemsShareWith(targetItem, updatedItem.shareWith)
      localStorage.setItem(`kanbanItems_${username}`, JSON.stringify(userItems))
    }
  })
}

const completionPercent = computed(() => {
  const rootItems = items.value.filter((item) => !item.parentId)
  if (rootItems.length === 0) return 0
  const doneItems = rootItems.filter((item) => item.status?.toLowerCase() === 'done').length
  return Math.round((doneItems / rootItems.length) * 100)
})

const priorityMap = {
  High: 3,
  Medium: 2,
  Low: 1,
  '': 0,
}

const sortedItems = (status) => {
  const statusMap = {
    Backlog: 'backlog',
    'In Progress': 'in progress',
    Done: 'done',
  }
  const normalizedStatus = statusMap[status] || status.toLowerCase()
  const filtered = items.value.filter((item) => {
    const itemStatus = item.status?.toLowerCase() || ''
    return !item.parentId && itemStatus === normalizedStatus
  })
  if (status === 'done') {
    return filtered.sort((a, b) => (a.movedToDoneAt || 0) - (b.movedToDoneAt || 0))
  }
  if (sortByPriority.value) {
    return filtered.sort((a, b) => {
      const priorityA = priorityMap[a.priority] || 0
      const priorityB = priorityMap[b.priority] || 0
      return priorityB - priorityA
    })
  }
  return filtered.sort((a, b) => new Date(a.deadline) - new Date(b.deadline))
}

watch(
  () => localStorage.getItem(`kanbanItems_${currentUser.value}`),
  async (newValue) => {
    if (newValue) {
      items.value = JSON.parse(newValue)
      await nextTick()
    }
  },
)

watch(
  () => localStorage.getItem(`kanbanInvitations_${currentUser.value}`),
  () => {
    loadInvitations()
  },
)

watch(
  () => localStorage.getItem(`kanbanMessages_${currentUser.value}`),
  () => {
    loadMessages()
  },
)
</script>

<style scoped>
.divider-col {
  border-left: 1px solid #ccc;
  padding-left: 8px;
}
</style>
